/* 
 * TrackingAPI
 *
 * API for retrieving tracking data and changing settings on LightBug & RemoteThings tracking devices
 *
 * OpenAPI spec version: 1.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Login a user with username/email and password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Body (JSON)</param>
        /// <param name="include">Related objects to include in the response. See the description of return value for more details. (optional)</param>
        /// <returns>AccessToken</returns>
        AccessToken UserLogin (Credentials credentials, string include = null);

        /// <summary>
        /// Login a user with username/email and password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Body (JSON)</param>
        /// <param name="include">Related objects to include in the response. See the description of return value for more details. (optional)</param>
        /// <returns>ApiResponse of AccessToken</returns>
        ApiResponse<AccessToken> UserLoginWithHttpInfo (Credentials credentials, string include = null);
        /// <summary>
        /// Creates a new instance in geofences of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">user id</param>
        /// <param name="data">Body (JSON) (optional)</param>
        /// <returns>Geofence</returns>
        Geofence UserPrototypeCreateGeofences (string id, Geofence data = null);

        /// <summary>
        /// Creates a new instance in geofences of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">user id</param>
        /// <param name="data">Body (JSON) (optional)</param>
        /// <returns>ApiResponse of Geofence</returns>
        ApiResponse<Geofence> UserPrototypeCreateGeofencesWithHttpInfo (string id, Geofence data = null);
        /// <summary>
        /// Deletes all geofences of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">user id</param>
        /// <returns></returns>
        void UserPrototypeDeleteGeofences (string id);

        /// <summary>
        /// Deletes all geofences of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">user id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UserPrototypeDeleteGeofencesWithHttpInfo (string id);
        /// <summary>
        /// Delete a related item by id for geofences.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fk">Foreign key for geofences</param>
        /// <param name="id">user id</param>
        /// <returns></returns>
        void UserPrototypeDestroyByIdGeofences (decimal? fk, string id);

        /// <summary>
        /// Delete a related item by id for geofences.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fk">Foreign key for geofences</param>
        /// <param name="id">user id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UserPrototypeDestroyByIdGeofencesWithHttpInfo (decimal? fk, string id);
        /// <summary>
        /// Find a related item by id for geofences.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fk">Foreign key for geofences</param>
        /// <param name="id">user id</param>
        /// <returns>Geofence</returns>
        Geofence UserPrototypeFindByIdGeofences (decimal? fk, string id);

        /// <summary>
        /// Find a related item by id for geofences.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fk">Foreign key for geofences</param>
        /// <param name="id">user id</param>
        /// <returns>ApiResponse of Geofence</returns>
        ApiResponse<Geofence> UserPrototypeFindByIdGeofencesWithHttpInfo (decimal? fk, string id);
        /// <summary>
        /// Queries devices of user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">user id</param>
        /// <param name="filter">JSON Filter object (optional)</param>
        /// <returns>List&lt;Device&gt;</returns>
        List<Device> UserPrototypeGetDevices (string id, string filter = null);

        /// <summary>
        /// Queries devices of user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">user id</param>
        /// <param name="filter">JSON Filter object (optional)</param>
        /// <returns>ApiResponse of List&lt;Device&gt;</returns>
        ApiResponse<List<Device>> UserPrototypeGetDevicesWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Queries geofences of user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">user id</param>
        /// <param name="filter">JSON Filter object (optional)</param>
        /// <returns>List&lt;Geofence&gt;</returns>
        List<Geofence> UserPrototypeGetGeofences (string id, string filter = null);

        /// <summary>
        /// Queries geofences of user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">user id</param>
        /// <param name="filter">JSON Filter object (optional)</param>
        /// <returns>ApiResponse of List&lt;Geofence&gt;</returns>
        ApiResponse<List<Geofence>> UserPrototypeGetGeofencesWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">user id</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 UserPrototypeGetMqttCredentials (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">user id</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> UserPrototypeGetMqttCredentialsWithHttpInfo (string id);
        /// <summary>
        /// Update a related item by id for geofences.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fk">Foreign key for geofences</param>
        /// <param name="id">user id</param>
        /// <param name="data">Body (JSON) (optional)</param>
        /// <returns>Geofence</returns>
        Geofence UserPrototypeUpdateByIdGeofences (decimal? fk, string id, Geofence data = null);

        /// <summary>
        /// Update a related item by id for geofences.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fk">Foreign key for geofences</param>
        /// <param name="id">user id</param>
        /// <param name="data">Body (JSON) (optional)</param>
        /// <returns>ApiResponse of Geofence</returns>
        ApiResponse<Geofence> UserPrototypeUpdateByIdGeofencesWithHttpInfo (decimal? fk, string id, Geofence data = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Login a user with username/email and password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Body (JSON)</param>
        /// <param name="include">Related objects to include in the response. See the description of return value for more details. (optional)</param>
        /// <returns>Task of AccessToken</returns>
        System.Threading.Tasks.Task<AccessToken> UserLoginAsync (Credentials credentials, string include = null);

        /// <summary>
        /// Login a user with username/email and password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Body (JSON)</param>
        /// <param name="include">Related objects to include in the response. See the description of return value for more details. (optional)</param>
        /// <returns>Task of ApiResponse (AccessToken)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccessToken>> UserLoginAsyncWithHttpInfo (Credentials credentials, string include = null);
        /// <summary>
        /// Creates a new instance in geofences of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">user id</param>
        /// <param name="data">Body (JSON) (optional)</param>
        /// <returns>Task of Geofence</returns>
        System.Threading.Tasks.Task<Geofence> UserPrototypeCreateGeofencesAsync (string id, Geofence data = null);

        /// <summary>
        /// Creates a new instance in geofences of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">user id</param>
        /// <param name="data">Body (JSON) (optional)</param>
        /// <returns>Task of ApiResponse (Geofence)</returns>
        System.Threading.Tasks.Task<ApiResponse<Geofence>> UserPrototypeCreateGeofencesAsyncWithHttpInfo (string id, Geofence data = null);
        /// <summary>
        /// Deletes all geofences of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">user id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserPrototypeDeleteGeofencesAsync (string id);

        /// <summary>
        /// Deletes all geofences of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">user id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UserPrototypeDeleteGeofencesAsyncWithHttpInfo (string id);
        /// <summary>
        /// Delete a related item by id for geofences.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fk">Foreign key for geofences</param>
        /// <param name="id">user id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserPrototypeDestroyByIdGeofencesAsync (decimal? fk, string id);

        /// <summary>
        /// Delete a related item by id for geofences.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fk">Foreign key for geofences</param>
        /// <param name="id">user id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UserPrototypeDestroyByIdGeofencesAsyncWithHttpInfo (decimal? fk, string id);
        /// <summary>
        /// Find a related item by id for geofences.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fk">Foreign key for geofences</param>
        /// <param name="id">user id</param>
        /// <returns>Task of Geofence</returns>
        System.Threading.Tasks.Task<Geofence> UserPrototypeFindByIdGeofencesAsync (decimal? fk, string id);

        /// <summary>
        /// Find a related item by id for geofences.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fk">Foreign key for geofences</param>
        /// <param name="id">user id</param>
        /// <returns>Task of ApiResponse (Geofence)</returns>
        System.Threading.Tasks.Task<ApiResponse<Geofence>> UserPrototypeFindByIdGeofencesAsyncWithHttpInfo (decimal? fk, string id);
        /// <summary>
        /// Queries devices of user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">user id</param>
        /// <param name="filter">JSON Filter object (optional)</param>
        /// <returns>Task of List&lt;Device&gt;</returns>
        System.Threading.Tasks.Task<List<Device>> UserPrototypeGetDevicesAsync (string id, string filter = null);

        /// <summary>
        /// Queries devices of user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">user id</param>
        /// <param name="filter">JSON Filter object (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Device&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Device>>> UserPrototypeGetDevicesAsyncWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Queries geofences of user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">user id</param>
        /// <param name="filter">JSON Filter object (optional)</param>
        /// <returns>Task of List&lt;Geofence&gt;</returns>
        System.Threading.Tasks.Task<List<Geofence>> UserPrototypeGetGeofencesAsync (string id, string filter = null);

        /// <summary>
        /// Queries geofences of user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">user id</param>
        /// <param name="filter">JSON Filter object (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Geofence&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Geofence>>> UserPrototypeGetGeofencesAsyncWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">user id</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> UserPrototypeGetMqttCredentialsAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">user id</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> UserPrototypeGetMqttCredentialsAsyncWithHttpInfo (string id);
        /// <summary>
        /// Update a related item by id for geofences.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fk">Foreign key for geofences</param>
        /// <param name="id">user id</param>
        /// <param name="data">Body (JSON) (optional)</param>
        /// <returns>Task of Geofence</returns>
        System.Threading.Tasks.Task<Geofence> UserPrototypeUpdateByIdGeofencesAsync (decimal? fk, string id, Geofence data = null);

        /// <summary>
        /// Update a related item by id for geofences.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fk">Foreign key for geofences</param>
        /// <param name="id">user id</param>
        /// <param name="data">Body (JSON) (optional)</param>
        /// <returns>Task of ApiResponse (Geofence)</returns>
        System.Threading.Tasks.Task<ApiResponse<Geofence>> UserPrototypeUpdateByIdGeofencesAsyncWithHttpInfo (decimal? fk, string id, Geofence data = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UserApi : IUserApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UserApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Login a user with username/email and password. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Body (JSON)</param>
        /// <param name="include">Related objects to include in the response. See the description of return value for more details. (optional)</param>
        /// <returns>AccessToken</returns>
        public AccessToken UserLogin (Credentials credentials, string include = null)
        {
             ApiResponse<AccessToken> localVarResponse = UserLoginWithHttpInfo(credentials, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Login a user with username/email and password. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Body (JSON)</param>
        /// <param name="include">Related objects to include in the response. See the description of return value for more details. (optional)</param>
        /// <returns>ApiResponse of AccessToken</returns>
        public ApiResponse< AccessToken > UserLoginWithHttpInfo (Credentials credentials, string include = null)
        {
            // verify the required parameter 'credentials' is set
            if (credentials == null)
                throw new ApiException(400, "Missing required parameter 'credentials' when calling UserApi->UserLogin");

            var localVarPath = "/users/login";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (include != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (credentials != null && credentials.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(credentials); // http body (model) parameter
            }
            else
            {
                localVarPostBody = credentials; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserLogin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccessToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccessToken) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccessToken)));
        }

        /// <summary>
        /// Login a user with username/email and password. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Body (JSON)</param>
        /// <param name="include">Related objects to include in the response. See the description of return value for more details. (optional)</param>
        /// <returns>Task of AccessToken</returns>
        public async System.Threading.Tasks.Task<AccessToken> UserLoginAsync (Credentials credentials, string include = null)
        {
             ApiResponse<AccessToken> localVarResponse = await UserLoginAsyncWithHttpInfo(credentials, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Login a user with username/email and password. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Body (JSON)</param>
        /// <param name="include">Related objects to include in the response. See the description of return value for more details. (optional)</param>
        /// <returns>Task of ApiResponse (AccessToken)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccessToken>> UserLoginAsyncWithHttpInfo (Credentials credentials, string include = null)
        {
            // verify the required parameter 'credentials' is set
            if (credentials == null)
                throw new ApiException(400, "Missing required parameter 'credentials' when calling UserApi->UserLogin");

            var localVarPath = "/users/login";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (include != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (credentials != null && credentials.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(credentials); // http body (model) parameter
            }
            else
            {
                localVarPostBody = credentials; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserLogin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccessToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccessToken) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccessToken)));
        }

        /// <summary>
        /// Creates a new instance in geofences of this model. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">user id</param>
        /// <param name="data">Body (JSON) (optional)</param>
        /// <returns>Geofence</returns>
        public Geofence UserPrototypeCreateGeofences (string id, Geofence data = null)
        {
             ApiResponse<Geofence> localVarResponse = UserPrototypeCreateGeofencesWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in geofences of this model. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">user id</param>
        /// <param name="data">Body (JSON) (optional)</param>
        /// <returns>ApiResponse of Geofence</returns>
        public ApiResponse< Geofence > UserPrototypeCreateGeofencesWithHttpInfo (string id, Geofence data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UserApi->UserPrototypeCreateGeofences");

            var localVarPath = "/users/{id}/geofences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserPrototypeCreateGeofences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Geofence>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Geofence) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Geofence)));
        }

        /// <summary>
        /// Creates a new instance in geofences of this model. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">user id</param>
        /// <param name="data">Body (JSON) (optional)</param>
        /// <returns>Task of Geofence</returns>
        public async System.Threading.Tasks.Task<Geofence> UserPrototypeCreateGeofencesAsync (string id, Geofence data = null)
        {
             ApiResponse<Geofence> localVarResponse = await UserPrototypeCreateGeofencesAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in geofences of this model. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">user id</param>
        /// <param name="data">Body (JSON) (optional)</param>
        /// <returns>Task of ApiResponse (Geofence)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Geofence>> UserPrototypeCreateGeofencesAsyncWithHttpInfo (string id, Geofence data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UserApi->UserPrototypeCreateGeofences");

            var localVarPath = "/users/{id}/geofences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserPrototypeCreateGeofences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Geofence>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Geofence) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Geofence)));
        }

        /// <summary>
        /// Deletes all geofences of this model. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">user id</param>
        /// <returns></returns>
        public void UserPrototypeDeleteGeofences (string id)
        {
             UserPrototypeDeleteGeofencesWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes all geofences of this model. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">user id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UserPrototypeDeleteGeofencesWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UserApi->UserPrototypeDeleteGeofences");

            var localVarPath = "/users/{id}/geofences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserPrototypeDeleteGeofences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes all geofences of this model. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">user id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserPrototypeDeleteGeofencesAsync (string id)
        {
             await UserPrototypeDeleteGeofencesAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Deletes all geofences of this model. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">user id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UserPrototypeDeleteGeofencesAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UserApi->UserPrototypeDeleteGeofences");

            var localVarPath = "/users/{id}/geofences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserPrototypeDeleteGeofences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for geofences. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fk">Foreign key for geofences</param>
        /// <param name="id">user id</param>
        /// <returns></returns>
        public void UserPrototypeDestroyByIdGeofences (decimal? fk, string id)
        {
             UserPrototypeDestroyByIdGeofencesWithHttpInfo(fk, id);
        }

        /// <summary>
        /// Delete a related item by id for geofences. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fk">Foreign key for geofences</param>
        /// <param name="id">user id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UserPrototypeDestroyByIdGeofencesWithHttpInfo (decimal? fk, string id)
        {
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling UserApi->UserPrototypeDestroyByIdGeofences");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UserApi->UserPrototypeDestroyByIdGeofences");

            var localVarPath = "/users/{id}/geofences/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserPrototypeDestroyByIdGeofences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for geofences. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fk">Foreign key for geofences</param>
        /// <param name="id">user id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserPrototypeDestroyByIdGeofencesAsync (decimal? fk, string id)
        {
             await UserPrototypeDestroyByIdGeofencesAsyncWithHttpInfo(fk, id);

        }

        /// <summary>
        /// Delete a related item by id for geofences. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fk">Foreign key for geofences</param>
        /// <param name="id">user id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UserPrototypeDestroyByIdGeofencesAsyncWithHttpInfo (decimal? fk, string id)
        {
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling UserApi->UserPrototypeDestroyByIdGeofences");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UserApi->UserPrototypeDestroyByIdGeofences");

            var localVarPath = "/users/{id}/geofences/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserPrototypeDestroyByIdGeofences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Find a related item by id for geofences. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fk">Foreign key for geofences</param>
        /// <param name="id">user id</param>
        /// <returns>Geofence</returns>
        public Geofence UserPrototypeFindByIdGeofences (decimal? fk, string id)
        {
             ApiResponse<Geofence> localVarResponse = UserPrototypeFindByIdGeofencesWithHttpInfo(fk, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a related item by id for geofences. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fk">Foreign key for geofences</param>
        /// <param name="id">user id</param>
        /// <returns>ApiResponse of Geofence</returns>
        public ApiResponse< Geofence > UserPrototypeFindByIdGeofencesWithHttpInfo (decimal? fk, string id)
        {
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling UserApi->UserPrototypeFindByIdGeofences");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UserApi->UserPrototypeFindByIdGeofences");

            var localVarPath = "/users/{id}/geofences/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserPrototypeFindByIdGeofences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Geofence>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Geofence) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Geofence)));
        }

        /// <summary>
        /// Find a related item by id for geofences. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fk">Foreign key for geofences</param>
        /// <param name="id">user id</param>
        /// <returns>Task of Geofence</returns>
        public async System.Threading.Tasks.Task<Geofence> UserPrototypeFindByIdGeofencesAsync (decimal? fk, string id)
        {
             ApiResponse<Geofence> localVarResponse = await UserPrototypeFindByIdGeofencesAsyncWithHttpInfo(fk, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a related item by id for geofences. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fk">Foreign key for geofences</param>
        /// <param name="id">user id</param>
        /// <returns>Task of ApiResponse (Geofence)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Geofence>> UserPrototypeFindByIdGeofencesAsyncWithHttpInfo (decimal? fk, string id)
        {
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling UserApi->UserPrototypeFindByIdGeofences");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UserApi->UserPrototypeFindByIdGeofences");

            var localVarPath = "/users/{id}/geofences/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserPrototypeFindByIdGeofences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Geofence>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Geofence) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Geofence)));
        }

        /// <summary>
        /// Queries devices of user. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">user id</param>
        /// <param name="filter">JSON Filter object (optional)</param>
        /// <returns>List&lt;Device&gt;</returns>
        public List<Device> UserPrototypeGetDevices (string id, string filter = null)
        {
             ApiResponse<List<Device>> localVarResponse = UserPrototypeGetDevicesWithHttpInfo(id, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries devices of user. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">user id</param>
        /// <param name="filter">JSON Filter object (optional)</param>
        /// <returns>ApiResponse of List&lt;Device&gt;</returns>
        public ApiResponse< List<Device> > UserPrototypeGetDevicesWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UserApi->UserPrototypeGetDevices");

            var localVarPath = "/users/{id}/devices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserPrototypeGetDevices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Device>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Device>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Device>)));
        }

        /// <summary>
        /// Queries devices of user. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">user id</param>
        /// <param name="filter">JSON Filter object (optional)</param>
        /// <returns>Task of List&lt;Device&gt;</returns>
        public async System.Threading.Tasks.Task<List<Device>> UserPrototypeGetDevicesAsync (string id, string filter = null)
        {
             ApiResponse<List<Device>> localVarResponse = await UserPrototypeGetDevicesAsyncWithHttpInfo(id, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries devices of user. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">user id</param>
        /// <param name="filter">JSON Filter object (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Device&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Device>>> UserPrototypeGetDevicesAsyncWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UserApi->UserPrototypeGetDevices");

            var localVarPath = "/users/{id}/devices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserPrototypeGetDevices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Device>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Device>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Device>)));
        }

        /// <summary>
        /// Queries geofences of user. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">user id</param>
        /// <param name="filter">JSON Filter object (optional)</param>
        /// <returns>List&lt;Geofence&gt;</returns>
        public List<Geofence> UserPrototypeGetGeofences (string id, string filter = null)
        {
             ApiResponse<List<Geofence>> localVarResponse = UserPrototypeGetGeofencesWithHttpInfo(id, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries geofences of user. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">user id</param>
        /// <param name="filter">JSON Filter object (optional)</param>
        /// <returns>ApiResponse of List&lt;Geofence&gt;</returns>
        public ApiResponse< List<Geofence> > UserPrototypeGetGeofencesWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UserApi->UserPrototypeGetGeofences");

            var localVarPath = "/users/{id}/geofences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserPrototypeGetGeofences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Geofence>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Geofence>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Geofence>)));
        }

        /// <summary>
        /// Queries geofences of user. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">user id</param>
        /// <param name="filter">JSON Filter object (optional)</param>
        /// <returns>Task of List&lt;Geofence&gt;</returns>
        public async System.Threading.Tasks.Task<List<Geofence>> UserPrototypeGetGeofencesAsync (string id, string filter = null)
        {
             ApiResponse<List<Geofence>> localVarResponse = await UserPrototypeGetGeofencesAsyncWithHttpInfo(id, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries geofences of user. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">user id</param>
        /// <param name="filter">JSON Filter object (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Geofence&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Geofence>>> UserPrototypeGetGeofencesAsyncWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UserApi->UserPrototypeGetGeofences");

            var localVarPath = "/users/{id}/geofences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserPrototypeGetGeofences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Geofence>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Geofence>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Geofence>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">user id</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 UserPrototypeGetMqttCredentials (string id)
        {
             ApiResponse<InlineResponse200> localVarResponse = UserPrototypeGetMqttCredentialsWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">user id</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > UserPrototypeGetMqttCredentialsWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UserApi->UserPrototypeGetMqttCredentials");

            var localVarPath = "/users/{id}/getMqttCredentials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserPrototypeGetMqttCredentials", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">user id</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> UserPrototypeGetMqttCredentialsAsync (string id)
        {
             ApiResponse<InlineResponse200> localVarResponse = await UserPrototypeGetMqttCredentialsAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">user id</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> UserPrototypeGetMqttCredentialsAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UserApi->UserPrototypeGetMqttCredentials");

            var localVarPath = "/users/{id}/getMqttCredentials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserPrototypeGetMqttCredentials", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Update a related item by id for geofences. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fk">Foreign key for geofences</param>
        /// <param name="id">user id</param>
        /// <param name="data">Body (JSON) (optional)</param>
        /// <returns>Geofence</returns>
        public Geofence UserPrototypeUpdateByIdGeofences (decimal? fk, string id, Geofence data = null)
        {
             ApiResponse<Geofence> localVarResponse = UserPrototypeUpdateByIdGeofencesWithHttpInfo(fk, id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a related item by id for geofences. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fk">Foreign key for geofences</param>
        /// <param name="id">user id</param>
        /// <param name="data">Body (JSON) (optional)</param>
        /// <returns>ApiResponse of Geofence</returns>
        public ApiResponse< Geofence > UserPrototypeUpdateByIdGeofencesWithHttpInfo (decimal? fk, string id, Geofence data = null)
        {
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling UserApi->UserPrototypeUpdateByIdGeofences");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UserApi->UserPrototypeUpdateByIdGeofences");

            var localVarPath = "/users/{id}/geofences/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserPrototypeUpdateByIdGeofences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Geofence>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Geofence) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Geofence)));
        }

        /// <summary>
        /// Update a related item by id for geofences. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fk">Foreign key for geofences</param>
        /// <param name="id">user id</param>
        /// <param name="data">Body (JSON) (optional)</param>
        /// <returns>Task of Geofence</returns>
        public async System.Threading.Tasks.Task<Geofence> UserPrototypeUpdateByIdGeofencesAsync (decimal? fk, string id, Geofence data = null)
        {
             ApiResponse<Geofence> localVarResponse = await UserPrototypeUpdateByIdGeofencesAsyncWithHttpInfo(fk, id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a related item by id for geofences. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fk">Foreign key for geofences</param>
        /// <param name="id">user id</param>
        /// <param name="data">Body (JSON) (optional)</param>
        /// <returns>Task of ApiResponse (Geofence)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Geofence>> UserPrototypeUpdateByIdGeofencesAsyncWithHttpInfo (decimal? fk, string id, Geofence data = null)
        {
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling UserApi->UserPrototypeUpdateByIdGeofences");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UserApi->UserPrototypeUpdateByIdGeofences");

            var localVarPath = "/users/{id}/geofences/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserPrototypeUpdateByIdGeofences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Geofence>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Geofence) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Geofence)));
        }

    }
}
