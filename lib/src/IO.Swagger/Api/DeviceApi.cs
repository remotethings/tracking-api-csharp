/* 
 * TrackingAPI
 *
 * API for retrieving tracking data and changing settings on LightBug & RemoteThings tracking devices
 *
 * OpenAPI spec version: 1.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeviceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Find a model instance by {{id}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Device</returns>
        Device DeviceFindById (string id, string filter = null);

        /// <summary>
        /// Find a model instance by {{id}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>ApiResponse of Device</returns>
        ApiResponse<Device> DeviceFindByIdWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Create alert/notification trigger for device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="data">Body (JSON) (optional)</param>
        /// <returns>NotificationTrigger</returns>
        NotificationTrigger DevicePrototypeCreateNotificationTriggers (decimal? id, NotificationTrigger data = null);

        /// <summary>
        /// Create alert/notification trigger for device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="data">Body (JSON) (optional)</param>
        /// <returns>ApiResponse of NotificationTrigger</returns>
        ApiResponse<NotificationTrigger> DevicePrototypeCreateNotificationTriggersWithHttpInfo (decimal? id, NotificationTrigger data = null);
        /// <summary>
        /// Remove all alert/notification trigger for device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <returns></returns>
        void DevicePrototypeDeleteNotificationTriggers (decimal? id);

        /// <summary>
        /// Remove all alert/notification trigger for device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DevicePrototypeDeleteNotificationTriggersWithHttpInfo (decimal? id);
        /// <summary>
        /// Delete a specific point for a device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="fk">Foreign key for points</param>
        /// <returns></returns>
        void DevicePrototypeDestroyByIdPoints (decimal? id, decimal? fk);

        /// <summary>
        /// Delete a specific point for a device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="fk">Foreign key for points</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DevicePrototypeDestroyByIdPointsWithHttpInfo (decimal? id, decimal? fk);
        /// <summary>
        /// Retrieve a specific point for a device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="fk">Foreign key for points</param>
        /// <returns>Datapoint</returns>
        Datapoint DevicePrototypeFindByIdPoints (decimal? id, decimal? fk);

        /// <summary>
        /// Retrieve a specific point for a device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="fk">Foreign key for points</param>
        /// <returns>ApiResponse of Datapoint</returns>
        ApiResponse<Datapoint> DevicePrototypeFindByIdPointsWithHttpInfo (decimal? id, decimal? fk);
        /// <summary>
        /// Retrieve a specific reading for a device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="fk">Foreign key for readings</param>
        /// <returns>SensorReading</returns>
        SensorReading DevicePrototypeFindByIdReadings (decimal? id, decimal? fk);

        /// <summary>
        /// Retrieve a specific reading for a device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="fk">Foreign key for readings</param>
        /// <returns>ApiResponse of SensorReading</returns>
        ApiResponse<SensorReading> DevicePrototypeFindByIdReadingsWithHttpInfo (decimal? id, decimal? fk);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="duration">How long to go into flightMode, in minutes</param>
        /// <returns>Object</returns>
        Object DevicePrototypeFlightMode (decimal? id, decimal? duration);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="duration">How long to go into flightMode, in minutes</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DevicePrototypeFlightModeWithHttpInfo (decimal? id, decimal? duration);
        /// <summary>
        /// Retrieve configuration for a device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="refresh">unused (optional)</param>
        /// <returns>DeviceConfig</returns>
        DeviceConfig DevicePrototypeGetConfig (decimal? id, bool? refresh = null);

        /// <summary>
        /// Retrieve configuration for a device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="refresh">unused (optional)</param>
        /// <returns>ApiResponse of DeviceConfig</returns>
        ApiResponse<DeviceConfig> DevicePrototypeGetConfigWithHttpInfo (decimal? id, bool? refresh = null);
        /// <summary>
        /// Get alerts for device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="filter">JSON Filter object (optional)</param>
        /// <returns>List&lt;NotificationTrigger&gt;</returns>
        List<NotificationTrigger> DevicePrototypeGetNotificationTriggers (decimal? id, string filter = null);

        /// <summary>
        /// Get alerts for device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="filter">JSON Filter object (optional)</param>
        /// <returns>ApiResponse of List&lt;NotificationTrigger&gt;</returns>
        ApiResponse<List<NotificationTrigger>> DevicePrototypeGetNotificationTriggersWithHttpInfo (decimal? id, string filter = null);
        /// <summary>
        /// Retrieve points for a device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="filter">JSON Filter object (optional)</param>
        /// <returns>List&lt;Datapoint&gt;</returns>
        List<Datapoint> DevicePrototypeGetPoints (decimal? id, string filter = null);

        /// <summary>
        /// Retrieve points for a device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="filter">JSON Filter object (optional)</param>
        /// <returns>ApiResponse of List&lt;Datapoint&gt;</returns>
        ApiResponse<List<Datapoint>> DevicePrototypeGetPointsWithHttpInfo (decimal? id, string filter = null);
        /// <summary>
        /// Retrieve readings for a device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="filter">JSON Filter object (optional)</param>
        /// <returns>List&lt;SensorReading&gt;</returns>
        List<SensorReading> DevicePrototypeGetReadings (decimal? id, string filter = null);

        /// <summary>
        /// Retrieve readings for a device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="filter">JSON Filter object (optional)</param>
        /// <returns>ApiResponse of List&lt;SensorReading&gt;</returns>
        ApiResponse<List<SensorReading>> DevicePrototypeGetReadingsWithHttpInfo (decimal? id, string filter = null);
        /// <summary>
        /// Get safe-zone for device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <returns>Geofence</returns>
        Geofence DevicePrototypeGetSafeZone (decimal? id);

        /// <summary>
        /// Get safe-zone for device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <returns>ApiResponse of Geofence</returns>
        ApiResponse<Geofence> DevicePrototypeGetSafeZoneWithHttpInfo (decimal? id);
        /// <summary>
        /// Update safe-zone for device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="data">Array of {lat:x,lng:y} points denoting the vertices of the safe-zone</param>
        /// <returns>Geofence</returns>
        Geofence DevicePrototypeSetSafeZone (decimal? id, List<GeoPoint> data);

        /// <summary>
        /// Update safe-zone for device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="data">Array of {lat:x,lng:y} points denoting the vertices of the safe-zone</param>
        /// <returns>ApiResponse of Geofence</returns>
        ApiResponse<Geofence> DevicePrototypeSetSafeZoneWithHttpInfo (decimal? id, List<GeoPoint> data);
        /// <summary>
        /// Send sleep instruction to device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="duration"> (optional)</param>
        /// <returns>Object</returns>
        Object DevicePrototypeSleep (decimal? id, decimal? duration = null);

        /// <summary>
        /// Send sleep instruction to device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="duration"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DevicePrototypeSleepWithHttpInfo (decimal? id, decimal? duration = null);
        /// <summary>
        /// Update configuration for a device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="data">Body (JSON) (optional)</param>
        /// <returns>DeviceConfig</returns>
        DeviceConfig DevicePrototypeUpdateConfig (decimal? id, DeviceConfig data = null);

        /// <summary>
        /// Update configuration for a device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="data">Body (JSON) (optional)</param>
        /// <returns>ApiResponse of DeviceConfig</returns>
        ApiResponse<DeviceConfig> DevicePrototypeUpdateConfigWithHttpInfo (decimal? id, DeviceConfig data = null);
        /// <summary>
        /// Send wake instruction to device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="duration"> (optional)</param>
        /// <returns>Object</returns>
        Object DevicePrototypeWakeUp (decimal? id, decimal? duration = null);

        /// <summary>
        /// Send wake instruction to device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="duration"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DevicePrototypeWakeUpWithHttpInfo (decimal? id, decimal? duration = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Find a model instance by {{id}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of Device</returns>
        System.Threading.Tasks.Task<Device> DeviceFindByIdAsync (string id, string filter = null);

        /// <summary>
        /// Find a model instance by {{id}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of ApiResponse (Device)</returns>
        System.Threading.Tasks.Task<ApiResponse<Device>> DeviceFindByIdAsyncWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Create alert/notification trigger for device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="data">Body (JSON) (optional)</param>
        /// <returns>Task of NotificationTrigger</returns>
        System.Threading.Tasks.Task<NotificationTrigger> DevicePrototypeCreateNotificationTriggersAsync (decimal? id, NotificationTrigger data = null);

        /// <summary>
        /// Create alert/notification trigger for device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="data">Body (JSON) (optional)</param>
        /// <returns>Task of ApiResponse (NotificationTrigger)</returns>
        System.Threading.Tasks.Task<ApiResponse<NotificationTrigger>> DevicePrototypeCreateNotificationTriggersAsyncWithHttpInfo (decimal? id, NotificationTrigger data = null);
        /// <summary>
        /// Remove all alert/notification trigger for device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DevicePrototypeDeleteNotificationTriggersAsync (decimal? id);

        /// <summary>
        /// Remove all alert/notification trigger for device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DevicePrototypeDeleteNotificationTriggersAsyncWithHttpInfo (decimal? id);
        /// <summary>
        /// Delete a specific point for a device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="fk">Foreign key for points</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DevicePrototypeDestroyByIdPointsAsync (decimal? id, decimal? fk);

        /// <summary>
        /// Delete a specific point for a device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="fk">Foreign key for points</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DevicePrototypeDestroyByIdPointsAsyncWithHttpInfo (decimal? id, decimal? fk);
        /// <summary>
        /// Retrieve a specific point for a device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="fk">Foreign key for points</param>
        /// <returns>Task of Datapoint</returns>
        System.Threading.Tasks.Task<Datapoint> DevicePrototypeFindByIdPointsAsync (decimal? id, decimal? fk);

        /// <summary>
        /// Retrieve a specific point for a device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="fk">Foreign key for points</param>
        /// <returns>Task of ApiResponse (Datapoint)</returns>
        System.Threading.Tasks.Task<ApiResponse<Datapoint>> DevicePrototypeFindByIdPointsAsyncWithHttpInfo (decimal? id, decimal? fk);
        /// <summary>
        /// Retrieve a specific reading for a device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="fk">Foreign key for readings</param>
        /// <returns>Task of SensorReading</returns>
        System.Threading.Tasks.Task<SensorReading> DevicePrototypeFindByIdReadingsAsync (decimal? id, decimal? fk);

        /// <summary>
        /// Retrieve a specific reading for a device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="fk">Foreign key for readings</param>
        /// <returns>Task of ApiResponse (SensorReading)</returns>
        System.Threading.Tasks.Task<ApiResponse<SensorReading>> DevicePrototypeFindByIdReadingsAsyncWithHttpInfo (decimal? id, decimal? fk);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="duration">How long to go into flightMode, in minutes</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DevicePrototypeFlightModeAsync (decimal? id, decimal? duration);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="duration">How long to go into flightMode, in minutes</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DevicePrototypeFlightModeAsyncWithHttpInfo (decimal? id, decimal? duration);
        /// <summary>
        /// Retrieve configuration for a device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="refresh">unused (optional)</param>
        /// <returns>Task of DeviceConfig</returns>
        System.Threading.Tasks.Task<DeviceConfig> DevicePrototypeGetConfigAsync (decimal? id, bool? refresh = null);

        /// <summary>
        /// Retrieve configuration for a device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="refresh">unused (optional)</param>
        /// <returns>Task of ApiResponse (DeviceConfig)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeviceConfig>> DevicePrototypeGetConfigAsyncWithHttpInfo (decimal? id, bool? refresh = null);
        /// <summary>
        /// Get alerts for device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="filter">JSON Filter object (optional)</param>
        /// <returns>Task of List&lt;NotificationTrigger&gt;</returns>
        System.Threading.Tasks.Task<List<NotificationTrigger>> DevicePrototypeGetNotificationTriggersAsync (decimal? id, string filter = null);

        /// <summary>
        /// Get alerts for device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="filter">JSON Filter object (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;NotificationTrigger&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NotificationTrigger>>> DevicePrototypeGetNotificationTriggersAsyncWithHttpInfo (decimal? id, string filter = null);
        /// <summary>
        /// Retrieve points for a device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="filter">JSON Filter object (optional)</param>
        /// <returns>Task of List&lt;Datapoint&gt;</returns>
        System.Threading.Tasks.Task<List<Datapoint>> DevicePrototypeGetPointsAsync (decimal? id, string filter = null);

        /// <summary>
        /// Retrieve points for a device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="filter">JSON Filter object (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Datapoint&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Datapoint>>> DevicePrototypeGetPointsAsyncWithHttpInfo (decimal? id, string filter = null);
        /// <summary>
        /// Retrieve readings for a device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="filter">JSON Filter object (optional)</param>
        /// <returns>Task of List&lt;SensorReading&gt;</returns>
        System.Threading.Tasks.Task<List<SensorReading>> DevicePrototypeGetReadingsAsync (decimal? id, string filter = null);

        /// <summary>
        /// Retrieve readings for a device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="filter">JSON Filter object (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;SensorReading&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SensorReading>>> DevicePrototypeGetReadingsAsyncWithHttpInfo (decimal? id, string filter = null);
        /// <summary>
        /// Get safe-zone for device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <returns>Task of Geofence</returns>
        System.Threading.Tasks.Task<Geofence> DevicePrototypeGetSafeZoneAsync (decimal? id);

        /// <summary>
        /// Get safe-zone for device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <returns>Task of ApiResponse (Geofence)</returns>
        System.Threading.Tasks.Task<ApiResponse<Geofence>> DevicePrototypeGetSafeZoneAsyncWithHttpInfo (decimal? id);
        /// <summary>
        /// Update safe-zone for device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="data">Array of {lat:x,lng:y} points denoting the vertices of the safe-zone</param>
        /// <returns>Task of Geofence</returns>
        System.Threading.Tasks.Task<Geofence> DevicePrototypeSetSafeZoneAsync (decimal? id, List<GeoPoint> data);

        /// <summary>
        /// Update safe-zone for device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="data">Array of {lat:x,lng:y} points denoting the vertices of the safe-zone</param>
        /// <returns>Task of ApiResponse (Geofence)</returns>
        System.Threading.Tasks.Task<ApiResponse<Geofence>> DevicePrototypeSetSafeZoneAsyncWithHttpInfo (decimal? id, List<GeoPoint> data);
        /// <summary>
        /// Send sleep instruction to device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="duration"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DevicePrototypeSleepAsync (decimal? id, decimal? duration = null);

        /// <summary>
        /// Send sleep instruction to device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="duration"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DevicePrototypeSleepAsyncWithHttpInfo (decimal? id, decimal? duration = null);
        /// <summary>
        /// Update configuration for a device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="data">Body (JSON) (optional)</param>
        /// <returns>Task of DeviceConfig</returns>
        System.Threading.Tasks.Task<DeviceConfig> DevicePrototypeUpdateConfigAsync (decimal? id, DeviceConfig data = null);

        /// <summary>
        /// Update configuration for a device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="data">Body (JSON) (optional)</param>
        /// <returns>Task of ApiResponse (DeviceConfig)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeviceConfig>> DevicePrototypeUpdateConfigAsyncWithHttpInfo (decimal? id, DeviceConfig data = null);
        /// <summary>
        /// Send wake instruction to device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="duration"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DevicePrototypeWakeUpAsync (decimal? id, decimal? duration = null);

        /// <summary>
        /// Send wake instruction to device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="duration"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DevicePrototypeWakeUpAsyncWithHttpInfo (decimal? id, decimal? duration = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DeviceApi : IDeviceApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DeviceApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DeviceApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Find a model instance by {{id}} from the data source. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Device</returns>
        public Device DeviceFindById (string id, string filter = null)
        {
             ApiResponse<Device> localVarResponse = DeviceFindByIdWithHttpInfo(id, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a model instance by {{id}} from the data source. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>ApiResponse of Device</returns>
        public ApiResponse< Device > DeviceFindByIdWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeviceApi->DeviceFindById");

            var localVarPath = "/devices/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceFindById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Device>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Device) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Device)));
        }

        /// <summary>
        /// Find a model instance by {{id}} from the data source. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of Device</returns>
        public async System.Threading.Tasks.Task<Device> DeviceFindByIdAsync (string id, string filter = null)
        {
             ApiResponse<Device> localVarResponse = await DeviceFindByIdAsyncWithHttpInfo(id, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a model instance by {{id}} from the data source. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of ApiResponse (Device)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Device>> DeviceFindByIdAsyncWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeviceApi->DeviceFindById");

            var localVarPath = "/devices/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceFindById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Device>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Device) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Device)));
        }

        /// <summary>
        /// Create alert/notification trigger for device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="data">Body (JSON) (optional)</param>
        /// <returns>NotificationTrigger</returns>
        public NotificationTrigger DevicePrototypeCreateNotificationTriggers (decimal? id, NotificationTrigger data = null)
        {
             ApiResponse<NotificationTrigger> localVarResponse = DevicePrototypeCreateNotificationTriggersWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create alert/notification trigger for device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="data">Body (JSON) (optional)</param>
        /// <returns>ApiResponse of NotificationTrigger</returns>
        public ApiResponse< NotificationTrigger > DevicePrototypeCreateNotificationTriggersWithHttpInfo (decimal? id, NotificationTrigger data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeviceApi->DevicePrototypeCreateNotificationTriggers");

            var localVarPath = "/devices/{id}/notificationTriggers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevicePrototypeCreateNotificationTriggers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NotificationTrigger>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NotificationTrigger) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NotificationTrigger)));
        }

        /// <summary>
        /// Create alert/notification trigger for device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="data">Body (JSON) (optional)</param>
        /// <returns>Task of NotificationTrigger</returns>
        public async System.Threading.Tasks.Task<NotificationTrigger> DevicePrototypeCreateNotificationTriggersAsync (decimal? id, NotificationTrigger data = null)
        {
             ApiResponse<NotificationTrigger> localVarResponse = await DevicePrototypeCreateNotificationTriggersAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create alert/notification trigger for device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="data">Body (JSON) (optional)</param>
        /// <returns>Task of ApiResponse (NotificationTrigger)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NotificationTrigger>> DevicePrototypeCreateNotificationTriggersAsyncWithHttpInfo (decimal? id, NotificationTrigger data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeviceApi->DevicePrototypeCreateNotificationTriggers");

            var localVarPath = "/devices/{id}/notificationTriggers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevicePrototypeCreateNotificationTriggers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NotificationTrigger>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NotificationTrigger) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NotificationTrigger)));
        }

        /// <summary>
        /// Remove all alert/notification trigger for device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <returns></returns>
        public void DevicePrototypeDeleteNotificationTriggers (decimal? id)
        {
             DevicePrototypeDeleteNotificationTriggersWithHttpInfo(id);
        }

        /// <summary>
        /// Remove all alert/notification trigger for device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DevicePrototypeDeleteNotificationTriggersWithHttpInfo (decimal? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeviceApi->DevicePrototypeDeleteNotificationTriggers");

            var localVarPath = "/devices/{id}/notificationTriggers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevicePrototypeDeleteNotificationTriggers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove all alert/notification trigger for device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DevicePrototypeDeleteNotificationTriggersAsync (decimal? id)
        {
             await DevicePrototypeDeleteNotificationTriggersAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Remove all alert/notification trigger for device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DevicePrototypeDeleteNotificationTriggersAsyncWithHttpInfo (decimal? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeviceApi->DevicePrototypeDeleteNotificationTriggers");

            var localVarPath = "/devices/{id}/notificationTriggers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevicePrototypeDeleteNotificationTriggers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a specific point for a device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="fk">Foreign key for points</param>
        /// <returns></returns>
        public void DevicePrototypeDestroyByIdPoints (decimal? id, decimal? fk)
        {
             DevicePrototypeDestroyByIdPointsWithHttpInfo(id, fk);
        }

        /// <summary>
        /// Delete a specific point for a device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="fk">Foreign key for points</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DevicePrototypeDestroyByIdPointsWithHttpInfo (decimal? id, decimal? fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeviceApi->DevicePrototypeDestroyByIdPoints");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling DeviceApi->DevicePrototypeDestroyByIdPoints");

            var localVarPath = "/devices/{id}/points/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", this.Configuration.ApiClient.ParameterToString(fk)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevicePrototypeDestroyByIdPoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a specific point for a device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="fk">Foreign key for points</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DevicePrototypeDestroyByIdPointsAsync (decimal? id, decimal? fk)
        {
             await DevicePrototypeDestroyByIdPointsAsyncWithHttpInfo(id, fk);

        }

        /// <summary>
        /// Delete a specific point for a device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="fk">Foreign key for points</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DevicePrototypeDestroyByIdPointsAsyncWithHttpInfo (decimal? id, decimal? fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeviceApi->DevicePrototypeDestroyByIdPoints");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling DeviceApi->DevicePrototypeDestroyByIdPoints");

            var localVarPath = "/devices/{id}/points/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", this.Configuration.ApiClient.ParameterToString(fk)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevicePrototypeDestroyByIdPoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retrieve a specific point for a device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="fk">Foreign key for points</param>
        /// <returns>Datapoint</returns>
        public Datapoint DevicePrototypeFindByIdPoints (decimal? id, decimal? fk)
        {
             ApiResponse<Datapoint> localVarResponse = DevicePrototypeFindByIdPointsWithHttpInfo(id, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a specific point for a device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="fk">Foreign key for points</param>
        /// <returns>ApiResponse of Datapoint</returns>
        public ApiResponse< Datapoint > DevicePrototypeFindByIdPointsWithHttpInfo (decimal? id, decimal? fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeviceApi->DevicePrototypeFindByIdPoints");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling DeviceApi->DevicePrototypeFindByIdPoints");

            var localVarPath = "/devices/{id}/points/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", this.Configuration.ApiClient.ParameterToString(fk)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevicePrototypeFindByIdPoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Datapoint>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Datapoint) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Datapoint)));
        }

        /// <summary>
        /// Retrieve a specific point for a device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="fk">Foreign key for points</param>
        /// <returns>Task of Datapoint</returns>
        public async System.Threading.Tasks.Task<Datapoint> DevicePrototypeFindByIdPointsAsync (decimal? id, decimal? fk)
        {
             ApiResponse<Datapoint> localVarResponse = await DevicePrototypeFindByIdPointsAsyncWithHttpInfo(id, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a specific point for a device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="fk">Foreign key for points</param>
        /// <returns>Task of ApiResponse (Datapoint)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Datapoint>> DevicePrototypeFindByIdPointsAsyncWithHttpInfo (decimal? id, decimal? fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeviceApi->DevicePrototypeFindByIdPoints");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling DeviceApi->DevicePrototypeFindByIdPoints");

            var localVarPath = "/devices/{id}/points/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", this.Configuration.ApiClient.ParameterToString(fk)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevicePrototypeFindByIdPoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Datapoint>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Datapoint) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Datapoint)));
        }

        /// <summary>
        /// Retrieve a specific reading for a device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="fk">Foreign key for readings</param>
        /// <returns>SensorReading</returns>
        public SensorReading DevicePrototypeFindByIdReadings (decimal? id, decimal? fk)
        {
             ApiResponse<SensorReading> localVarResponse = DevicePrototypeFindByIdReadingsWithHttpInfo(id, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a specific reading for a device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="fk">Foreign key for readings</param>
        /// <returns>ApiResponse of SensorReading</returns>
        public ApiResponse< SensorReading > DevicePrototypeFindByIdReadingsWithHttpInfo (decimal? id, decimal? fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeviceApi->DevicePrototypeFindByIdReadings");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling DeviceApi->DevicePrototypeFindByIdReadings");

            var localVarPath = "/devices/{id}/readings/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", this.Configuration.ApiClient.ParameterToString(fk)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevicePrototypeFindByIdReadings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SensorReading>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SensorReading) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SensorReading)));
        }

        /// <summary>
        /// Retrieve a specific reading for a device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="fk">Foreign key for readings</param>
        /// <returns>Task of SensorReading</returns>
        public async System.Threading.Tasks.Task<SensorReading> DevicePrototypeFindByIdReadingsAsync (decimal? id, decimal? fk)
        {
             ApiResponse<SensorReading> localVarResponse = await DevicePrototypeFindByIdReadingsAsyncWithHttpInfo(id, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a specific reading for a device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="fk">Foreign key for readings</param>
        /// <returns>Task of ApiResponse (SensorReading)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SensorReading>> DevicePrototypeFindByIdReadingsAsyncWithHttpInfo (decimal? id, decimal? fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeviceApi->DevicePrototypeFindByIdReadings");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling DeviceApi->DevicePrototypeFindByIdReadings");

            var localVarPath = "/devices/{id}/readings/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", this.Configuration.ApiClient.ParameterToString(fk)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevicePrototypeFindByIdReadings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SensorReading>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SensorReading) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SensorReading)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="duration">How long to go into flightMode, in minutes</param>
        /// <returns>Object</returns>
        public Object DevicePrototypeFlightMode (decimal? id, decimal? duration)
        {
             ApiResponse<Object> localVarResponse = DevicePrototypeFlightModeWithHttpInfo(id, duration);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="duration">How long to go into flightMode, in minutes</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DevicePrototypeFlightModeWithHttpInfo (decimal? id, decimal? duration)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeviceApi->DevicePrototypeFlightMode");
            // verify the required parameter 'duration' is set
            if (duration == null)
                throw new ApiException(400, "Missing required parameter 'duration' when calling DeviceApi->DevicePrototypeFlightMode");

            var localVarPath = "/devices/{id}/flightMode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (duration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "duration", duration)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevicePrototypeFlightMode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="duration">How long to go into flightMode, in minutes</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DevicePrototypeFlightModeAsync (decimal? id, decimal? duration)
        {
             ApiResponse<Object> localVarResponse = await DevicePrototypeFlightModeAsyncWithHttpInfo(id, duration);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="duration">How long to go into flightMode, in minutes</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DevicePrototypeFlightModeAsyncWithHttpInfo (decimal? id, decimal? duration)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeviceApi->DevicePrototypeFlightMode");
            // verify the required parameter 'duration' is set
            if (duration == null)
                throw new ApiException(400, "Missing required parameter 'duration' when calling DeviceApi->DevicePrototypeFlightMode");

            var localVarPath = "/devices/{id}/flightMode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (duration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "duration", duration)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevicePrototypeFlightMode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Retrieve configuration for a device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="refresh">unused (optional)</param>
        /// <returns>DeviceConfig</returns>
        public DeviceConfig DevicePrototypeGetConfig (decimal? id, bool? refresh = null)
        {
             ApiResponse<DeviceConfig> localVarResponse = DevicePrototypeGetConfigWithHttpInfo(id, refresh);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve configuration for a device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="refresh">unused (optional)</param>
        /// <returns>ApiResponse of DeviceConfig</returns>
        public ApiResponse< DeviceConfig > DevicePrototypeGetConfigWithHttpInfo (decimal? id, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeviceApi->DevicePrototypeGetConfig");

            var localVarPath = "/devices/{id}/config";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (refresh != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "refresh", refresh)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevicePrototypeGetConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeviceConfig) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceConfig)));
        }

        /// <summary>
        /// Retrieve configuration for a device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="refresh">unused (optional)</param>
        /// <returns>Task of DeviceConfig</returns>
        public async System.Threading.Tasks.Task<DeviceConfig> DevicePrototypeGetConfigAsync (decimal? id, bool? refresh = null)
        {
             ApiResponse<DeviceConfig> localVarResponse = await DevicePrototypeGetConfigAsyncWithHttpInfo(id, refresh);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve configuration for a device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="refresh">unused (optional)</param>
        /// <returns>Task of ApiResponse (DeviceConfig)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeviceConfig>> DevicePrototypeGetConfigAsyncWithHttpInfo (decimal? id, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeviceApi->DevicePrototypeGetConfig");

            var localVarPath = "/devices/{id}/config";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (refresh != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "refresh", refresh)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevicePrototypeGetConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeviceConfig) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceConfig)));
        }

        /// <summary>
        /// Get alerts for device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="filter">JSON Filter object (optional)</param>
        /// <returns>List&lt;NotificationTrigger&gt;</returns>
        public List<NotificationTrigger> DevicePrototypeGetNotificationTriggers (decimal? id, string filter = null)
        {
             ApiResponse<List<NotificationTrigger>> localVarResponse = DevicePrototypeGetNotificationTriggersWithHttpInfo(id, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get alerts for device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="filter">JSON Filter object (optional)</param>
        /// <returns>ApiResponse of List&lt;NotificationTrigger&gt;</returns>
        public ApiResponse< List<NotificationTrigger> > DevicePrototypeGetNotificationTriggersWithHttpInfo (decimal? id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeviceApi->DevicePrototypeGetNotificationTriggers");

            var localVarPath = "/devices/{id}/notificationTriggers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevicePrototypeGetNotificationTriggers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NotificationTrigger>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<NotificationTrigger>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NotificationTrigger>)));
        }

        /// <summary>
        /// Get alerts for device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="filter">JSON Filter object (optional)</param>
        /// <returns>Task of List&lt;NotificationTrigger&gt;</returns>
        public async System.Threading.Tasks.Task<List<NotificationTrigger>> DevicePrototypeGetNotificationTriggersAsync (decimal? id, string filter = null)
        {
             ApiResponse<List<NotificationTrigger>> localVarResponse = await DevicePrototypeGetNotificationTriggersAsyncWithHttpInfo(id, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get alerts for device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="filter">JSON Filter object (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;NotificationTrigger&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<NotificationTrigger>>> DevicePrototypeGetNotificationTriggersAsyncWithHttpInfo (decimal? id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeviceApi->DevicePrototypeGetNotificationTriggers");

            var localVarPath = "/devices/{id}/notificationTriggers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevicePrototypeGetNotificationTriggers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NotificationTrigger>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<NotificationTrigger>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NotificationTrigger>)));
        }

        /// <summary>
        /// Retrieve points for a device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="filter">JSON Filter object (optional)</param>
        /// <returns>List&lt;Datapoint&gt;</returns>
        public List<Datapoint> DevicePrototypeGetPoints (decimal? id, string filter = null)
        {
             ApiResponse<List<Datapoint>> localVarResponse = DevicePrototypeGetPointsWithHttpInfo(id, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve points for a device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="filter">JSON Filter object (optional)</param>
        /// <returns>ApiResponse of List&lt;Datapoint&gt;</returns>
        public ApiResponse< List<Datapoint> > DevicePrototypeGetPointsWithHttpInfo (decimal? id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeviceApi->DevicePrototypeGetPoints");

            var localVarPath = "/devices/{id}/points";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevicePrototypeGetPoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Datapoint>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Datapoint>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Datapoint>)));
        }

        /// <summary>
        /// Retrieve points for a device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="filter">JSON Filter object (optional)</param>
        /// <returns>Task of List&lt;Datapoint&gt;</returns>
        public async System.Threading.Tasks.Task<List<Datapoint>> DevicePrototypeGetPointsAsync (decimal? id, string filter = null)
        {
             ApiResponse<List<Datapoint>> localVarResponse = await DevicePrototypeGetPointsAsyncWithHttpInfo(id, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve points for a device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="filter">JSON Filter object (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Datapoint&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Datapoint>>> DevicePrototypeGetPointsAsyncWithHttpInfo (decimal? id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeviceApi->DevicePrototypeGetPoints");

            var localVarPath = "/devices/{id}/points";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevicePrototypeGetPoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Datapoint>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Datapoint>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Datapoint>)));
        }

        /// <summary>
        /// Retrieve readings for a device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="filter">JSON Filter object (optional)</param>
        /// <returns>List&lt;SensorReading&gt;</returns>
        public List<SensorReading> DevicePrototypeGetReadings (decimal? id, string filter = null)
        {
             ApiResponse<List<SensorReading>> localVarResponse = DevicePrototypeGetReadingsWithHttpInfo(id, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve readings for a device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="filter">JSON Filter object (optional)</param>
        /// <returns>ApiResponse of List&lt;SensorReading&gt;</returns>
        public ApiResponse< List<SensorReading> > DevicePrototypeGetReadingsWithHttpInfo (decimal? id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeviceApi->DevicePrototypeGetReadings");

            var localVarPath = "/devices/{id}/readings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevicePrototypeGetReadings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SensorReading>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SensorReading>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SensorReading>)));
        }

        /// <summary>
        /// Retrieve readings for a device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="filter">JSON Filter object (optional)</param>
        /// <returns>Task of List&lt;SensorReading&gt;</returns>
        public async System.Threading.Tasks.Task<List<SensorReading>> DevicePrototypeGetReadingsAsync (decimal? id, string filter = null)
        {
             ApiResponse<List<SensorReading>> localVarResponse = await DevicePrototypeGetReadingsAsyncWithHttpInfo(id, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve readings for a device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="filter">JSON Filter object (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;SensorReading&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SensorReading>>> DevicePrototypeGetReadingsAsyncWithHttpInfo (decimal? id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeviceApi->DevicePrototypeGetReadings");

            var localVarPath = "/devices/{id}/readings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevicePrototypeGetReadings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SensorReading>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SensorReading>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SensorReading>)));
        }

        /// <summary>
        /// Get safe-zone for device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <returns>Geofence</returns>
        public Geofence DevicePrototypeGetSafeZone (decimal? id)
        {
             ApiResponse<Geofence> localVarResponse = DevicePrototypeGetSafeZoneWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get safe-zone for device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <returns>ApiResponse of Geofence</returns>
        public ApiResponse< Geofence > DevicePrototypeGetSafeZoneWithHttpInfo (decimal? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeviceApi->DevicePrototypeGetSafeZone");

            var localVarPath = "/devices/{id}/getSafeZone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevicePrototypeGetSafeZone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Geofence>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Geofence) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Geofence)));
        }

        /// <summary>
        /// Get safe-zone for device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <returns>Task of Geofence</returns>
        public async System.Threading.Tasks.Task<Geofence> DevicePrototypeGetSafeZoneAsync (decimal? id)
        {
             ApiResponse<Geofence> localVarResponse = await DevicePrototypeGetSafeZoneAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get safe-zone for device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <returns>Task of ApiResponse (Geofence)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Geofence>> DevicePrototypeGetSafeZoneAsyncWithHttpInfo (decimal? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeviceApi->DevicePrototypeGetSafeZone");

            var localVarPath = "/devices/{id}/getSafeZone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevicePrototypeGetSafeZone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Geofence>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Geofence) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Geofence)));
        }

        /// <summary>
        /// Update safe-zone for device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="data">Array of {lat:x,lng:y} points denoting the vertices of the safe-zone</param>
        /// <returns>Geofence</returns>
        public Geofence DevicePrototypeSetSafeZone (decimal? id, List<GeoPoint> data)
        {
             ApiResponse<Geofence> localVarResponse = DevicePrototypeSetSafeZoneWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update safe-zone for device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="data">Array of {lat:x,lng:y} points denoting the vertices of the safe-zone</param>
        /// <returns>ApiResponse of Geofence</returns>
        public ApiResponse< Geofence > DevicePrototypeSetSafeZoneWithHttpInfo (decimal? id, List<GeoPoint> data)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeviceApi->DevicePrototypeSetSafeZone");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling DeviceApi->DevicePrototypeSetSafeZone");

            var localVarPath = "/devices/{id}/setSafeZone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevicePrototypeSetSafeZone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Geofence>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Geofence) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Geofence)));
        }

        /// <summary>
        /// Update safe-zone for device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="data">Array of {lat:x,lng:y} points denoting the vertices of the safe-zone</param>
        /// <returns>Task of Geofence</returns>
        public async System.Threading.Tasks.Task<Geofence> DevicePrototypeSetSafeZoneAsync (decimal? id, List<GeoPoint> data)
        {
             ApiResponse<Geofence> localVarResponse = await DevicePrototypeSetSafeZoneAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update safe-zone for device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="data">Array of {lat:x,lng:y} points denoting the vertices of the safe-zone</param>
        /// <returns>Task of ApiResponse (Geofence)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Geofence>> DevicePrototypeSetSafeZoneAsyncWithHttpInfo (decimal? id, List<GeoPoint> data)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeviceApi->DevicePrototypeSetSafeZone");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling DeviceApi->DevicePrototypeSetSafeZone");

            var localVarPath = "/devices/{id}/setSafeZone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevicePrototypeSetSafeZone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Geofence>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Geofence) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Geofence)));
        }

        /// <summary>
        /// Send sleep instruction to device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="duration"> (optional)</param>
        /// <returns>Object</returns>
        public Object DevicePrototypeSleep (decimal? id, decimal? duration = null)
        {
             ApiResponse<Object> localVarResponse = DevicePrototypeSleepWithHttpInfo(id, duration);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send sleep instruction to device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="duration"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DevicePrototypeSleepWithHttpInfo (decimal? id, decimal? duration = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeviceApi->DevicePrototypeSleep");

            var localVarPath = "/devices/{id}/sleep";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (duration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "duration", duration)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevicePrototypeSleep", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Send sleep instruction to device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="duration"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DevicePrototypeSleepAsync (decimal? id, decimal? duration = null)
        {
             ApiResponse<Object> localVarResponse = await DevicePrototypeSleepAsyncWithHttpInfo(id, duration);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send sleep instruction to device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="duration"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DevicePrototypeSleepAsyncWithHttpInfo (decimal? id, decimal? duration = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeviceApi->DevicePrototypeSleep");

            var localVarPath = "/devices/{id}/sleep";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (duration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "duration", duration)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevicePrototypeSleep", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Update configuration for a device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="data">Body (JSON) (optional)</param>
        /// <returns>DeviceConfig</returns>
        public DeviceConfig DevicePrototypeUpdateConfig (decimal? id, DeviceConfig data = null)
        {
             ApiResponse<DeviceConfig> localVarResponse = DevicePrototypeUpdateConfigWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update configuration for a device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="data">Body (JSON) (optional)</param>
        /// <returns>ApiResponse of DeviceConfig</returns>
        public ApiResponse< DeviceConfig > DevicePrototypeUpdateConfigWithHttpInfo (decimal? id, DeviceConfig data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeviceApi->DevicePrototypeUpdateConfig");

            var localVarPath = "/devices/{id}/config";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevicePrototypeUpdateConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeviceConfig) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceConfig)));
        }

        /// <summary>
        /// Update configuration for a device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="data">Body (JSON) (optional)</param>
        /// <returns>Task of DeviceConfig</returns>
        public async System.Threading.Tasks.Task<DeviceConfig> DevicePrototypeUpdateConfigAsync (decimal? id, DeviceConfig data = null)
        {
             ApiResponse<DeviceConfig> localVarResponse = await DevicePrototypeUpdateConfigAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update configuration for a device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="data">Body (JSON) (optional)</param>
        /// <returns>Task of ApiResponse (DeviceConfig)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeviceConfig>> DevicePrototypeUpdateConfigAsyncWithHttpInfo (decimal? id, DeviceConfig data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeviceApi->DevicePrototypeUpdateConfig");

            var localVarPath = "/devices/{id}/config";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevicePrototypeUpdateConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeviceConfig) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceConfig)));
        }

        /// <summary>
        /// Send wake instruction to device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="duration"> (optional)</param>
        /// <returns>Object</returns>
        public Object DevicePrototypeWakeUp (decimal? id, decimal? duration = null)
        {
             ApiResponse<Object> localVarResponse = DevicePrototypeWakeUpWithHttpInfo(id, duration);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send wake instruction to device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="duration"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DevicePrototypeWakeUpWithHttpInfo (decimal? id, decimal? duration = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeviceApi->DevicePrototypeWakeUp");

            var localVarPath = "/devices/{id}/wakeUp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (duration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "duration", duration)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevicePrototypeWakeUp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Send wake instruction to device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="duration"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DevicePrototypeWakeUpAsync (decimal? id, decimal? duration = null)
        {
             ApiResponse<Object> localVarResponse = await DevicePrototypeWakeUpAsyncWithHttpInfo(id, duration);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send wake instruction to device 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">device id</param>
        /// <param name="duration"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DevicePrototypeWakeUpAsyncWithHttpInfo (decimal? id, decimal? duration = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeviceApi->DevicePrototypeWakeUp");

            var localVarPath = "/devices/{id}/wakeUp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml",
                "application/javascript",
                "text/javascript"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (duration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "duration", duration)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevicePrototypeWakeUp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

    }
}
