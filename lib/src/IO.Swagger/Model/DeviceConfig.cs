/* 
 * TrackingAPI
 *
 * API for retrieving tracking data and changing settings on LightBug & RemoteThings tracking devices
 *
 * OpenAPI spec version: 1.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// DeviceConfig
    /// </summary>
    [DataContract]
    public partial class DeviceConfig :  IEquatable<DeviceConfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceConfig" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DeviceConfig() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceConfig" /> class.
        /// </summary>
        /// <param name="CurrentFW">Current Firmware version.</param>
        /// <param name="OtaFW">Pending Firmware version. If non null, the unit will be told to upgrade to this version when it next transmits in sleep mode..</param>
        /// <param name="Interval">The wake mode interval in seconds. The unit will connect to the server this often when awake. (required).</param>
        /// <param name="SleepInterval">Sleep mode interval in seconds. The unit will try to connect this often to the server when asleep (required).</param>
        /// <param name="CheckInInterval">Internal Use. A failsafe to ensure the unit connects to the server at least this often. (required).</param>
        /// <param name="Packing">The number of GPS points to send with each transmission. A packing setting of 3 with an &#39;interval&#39; of 60s will result in points recorded approximately every 20s, but they will only be sent together. This increases the time you have to wait for locations to come through to the server but improves battery life (required).</param>
        /// <param name="MovementSensitivity">Deprecated. See debounce..</param>
        /// <param name="Debounce">Movement sensitivity on a scale of 1 to 10, with 1 being the most sensitive. It is correlated to the number of consecutive milliseconds the acceleration needs to exceed the movementSensitivity threshold.</param>
        /// <param name="MovementSensitivity2">A secondary debounce value. Typically this value is lower or equal to debounce, representing increased sensitivity to movement once the device is already moving..</param>
        /// <param name="Behavior">Char Bitfield with various flags. Advanced use only.  DisableBluetooth:32 |  Encrypt:128 |  GsmOnWhenAwake:1 |  GsmOnWhenAsleep:2 |  GpsOnWhenAwake:4 |  DisableWifiAccuracyAssist:8 |  RepeatSleep:16 |  DisableWifi:64.</param>
        /// <param name="ModeControl">Char Bitfield with various flags. Advanced use only.  StartStopOnly:1 |  LockAwakeOnAlert:2 |  SendSleepLocAfterBtDisconnect:4 | .</param>
        /// <param name="GpsTimeout">How long to let the GPS searches for a lock in seconds before giving up. Max 255s..</param>
        /// <param name="TransmitTimeout">When the unit first wakes up from sleep, how long to wait before trying to transmit in multiples of 30 seconds. 0 &#x3D; instant, 1 &#x3D; 30s, 2 &#x3D; 60s...   Useful to avoid detection or draining battery inside shielded buildings..</param>
        /// <param name="GpsStabilize">How long to let the GPS stabilise in seconds once a lock is achieved before sending the position. Higher values may increase accuracy..</param>
        /// <param name="GpsCheckInterval">If a safe-zone is used, how often to check the wifi &amp; gps to see if its still inside it (only applies when motion is detected).</param>
        /// <param name="StopTimeout">The total amount of time in seconds the unit has to be stationary for before deeming the journey over and switching to sleep mode.</param>
        /// <param name="TolerancePercentage">Reserved for internal use..</param>
        /// <param name="ReasonsToWake">ReasonsToWake.</param>
        /// <param name="Modified">Set to any non null date to indicate the configuration should be pushed to the device when it next connects.</param>
        /// <param name="ForceFw">Internal use.   Used with otaFW. Set to true to force the unit to upgrade on next connection (rather than waiting for a sleep connection (default to false).</param>
        /// <param name="ReceivedAt">Indicates the last time the settings were sent to the device.</param>
        /// <param name="Reset">Non NULL values cause unit to restart on next connection   0 &#x3D; Normal reboot   1 &#x3D; Clear settings cache and restart   2 &#x3D; Clear cache and bluetooth connection data, then restart.</param>
        /// <param name="FlashTryCount">Internal use. Set to 0 when changing otaFW.</param>
        /// <param name="HomeWifiNetwork">WiFi network name to use as a Safe-zone. When this network is visible, stay asleep.</param>
        /// <param name="WakeAction">What to do when the unit wakes up (ie is moved and not in a safe-zone). Options are &#39;available&#39; (lost and found), and &#39;normal&#39; (tracking) (required) (default to &quot;normal&quot;).</param>
        /// <param name="OnDemandTime">Deprecated (required).</param>
        /// <param name="AlertAction">What to do when the button is pressed or the unit is dropped. Options are &#39;available&#39; (stay registered on the mobile network), &#39;nothing&#39; (one transmission) and  &#39;lockOn&#39; (keep transmitting at &#39;interval&#39; until instructed otherwise (required) (default to &quot;nothing&quot;).</param>
        /// <param name="Id">Id.</param>
        /// <param name="DeviceId">DeviceId.</param>
        /// <param name="SafeZoneId">SafeZoneId.</param>
        public DeviceConfig(string CurrentFW = default(string), string OtaFW = default(string), decimal? Interval = default(decimal?), decimal? SleepInterval = default(decimal?), decimal? CheckInInterval = default(decimal?), decimal? Packing = default(decimal?), decimal? MovementSensitivity = default(decimal?), decimal? Debounce = default(decimal?), decimal? MovementSensitivity2 = default(decimal?), decimal? Behavior = default(decimal?), decimal? ModeControl = default(decimal?), decimal? GpsTimeout = default(decimal?), decimal? TransmitTimeout = default(decimal?), decimal? GpsStabilize = default(decimal?), decimal? GpsCheckInterval = default(decimal?), decimal? StopTimeout = default(decimal?), decimal? TolerancePercentage = default(decimal?), List<Object> ReasonsToWake = default(List<Object>), DateTime? Modified = default(DateTime?), bool? ForceFw = false, DateTime? ReceivedAt = default(DateTime?), decimal? Reset = default(decimal?), decimal? FlashTryCount = default(decimal?), string HomeWifiNetwork = default(string), string WakeAction = "normal", decimal? OnDemandTime = default(decimal?), string AlertAction = "nothing", decimal? Id = default(decimal?), decimal? DeviceId = default(decimal?), decimal? SafeZoneId = default(decimal?))
        {
            // to ensure "Interval" is required (not null)
            if (Interval == null)
            {
                throw new InvalidDataException("Interval is a required property for DeviceConfig and cannot be null");
            }
            else
            {
                this.Interval = Interval;
            }
            // to ensure "SleepInterval" is required (not null)
            if (SleepInterval == null)
            {
                throw new InvalidDataException("SleepInterval is a required property for DeviceConfig and cannot be null");
            }
            else
            {
                this.SleepInterval = SleepInterval;
            }
            // to ensure "CheckInInterval" is required (not null)
            if (CheckInInterval == null)
            {
                throw new InvalidDataException("CheckInInterval is a required property for DeviceConfig and cannot be null");
            }
            else
            {
                this.CheckInInterval = CheckInInterval;
            }
            // to ensure "Packing" is required (not null)
            if (Packing == null)
            {
                throw new InvalidDataException("Packing is a required property for DeviceConfig and cannot be null");
            }
            else
            {
                this.Packing = Packing;
            }
            // to ensure "WakeAction" is required (not null)
            if (WakeAction == null)
            {
                throw new InvalidDataException("WakeAction is a required property for DeviceConfig and cannot be null");
            }
            else
            {
                this.WakeAction = WakeAction;
            }
            // to ensure "OnDemandTime" is required (not null)
            if (OnDemandTime == null)
            {
                throw new InvalidDataException("OnDemandTime is a required property for DeviceConfig and cannot be null");
            }
            else
            {
                this.OnDemandTime = OnDemandTime;
            }
            // to ensure "AlertAction" is required (not null)
            if (AlertAction == null)
            {
                throw new InvalidDataException("AlertAction is a required property for DeviceConfig and cannot be null");
            }
            else
            {
                this.AlertAction = AlertAction;
            }
            this.CurrentFW = CurrentFW;
            this.OtaFW = OtaFW;
            this.MovementSensitivity = MovementSensitivity;
            this.Debounce = Debounce;
            this.MovementSensitivity2 = MovementSensitivity2;
            this.Behavior = Behavior;
            this.ModeControl = ModeControl;
            this.GpsTimeout = GpsTimeout;
            this.TransmitTimeout = TransmitTimeout;
            this.GpsStabilize = GpsStabilize;
            this.GpsCheckInterval = GpsCheckInterval;
            this.StopTimeout = StopTimeout;
            this.TolerancePercentage = TolerancePercentage;
            this.ReasonsToWake = ReasonsToWake;
            this.Modified = Modified;
            // use default value if no "ForceFw" provided
            if (ForceFw == null)
            {
                this.ForceFw = false;
            }
            else
            {
                this.ForceFw = ForceFw;
            }
            this.ReceivedAt = ReceivedAt;
            this.Reset = Reset;
            this.FlashTryCount = FlashTryCount;
            this.HomeWifiNetwork = HomeWifiNetwork;
            this.Id = Id;
            this.DeviceId = DeviceId;
            this.SafeZoneId = SafeZoneId;
        }
        
        /// <summary>
        /// Current Firmware version
        /// </summary>
        /// <value>Current Firmware version</value>
        [DataMember(Name="currentFW", EmitDefaultValue=false)]
        public string CurrentFW { get; set; }

        /// <summary>
        /// Pending Firmware version. If non null, the unit will be told to upgrade to this version when it next transmits in sleep mode.
        /// </summary>
        /// <value>Pending Firmware version. If non null, the unit will be told to upgrade to this version when it next transmits in sleep mode.</value>
        [DataMember(Name="otaFW", EmitDefaultValue=false)]
        public string OtaFW { get; set; }

        /// <summary>
        /// The wake mode interval in seconds. The unit will connect to the server this often when awake.
        /// </summary>
        /// <value>The wake mode interval in seconds. The unit will connect to the server this often when awake.</value>
        [DataMember(Name="interval", EmitDefaultValue=false)]
        public decimal? Interval { get; set; }

        /// <summary>
        /// Sleep mode interval in seconds. The unit will try to connect this often to the server when asleep
        /// </summary>
        /// <value>Sleep mode interval in seconds. The unit will try to connect this often to the server when asleep</value>
        [DataMember(Name="sleepInterval", EmitDefaultValue=false)]
        public decimal? SleepInterval { get; set; }

        /// <summary>
        /// Internal Use. A failsafe to ensure the unit connects to the server at least this often.
        /// </summary>
        /// <value>Internal Use. A failsafe to ensure the unit connects to the server at least this often.</value>
        [DataMember(Name="checkInInterval", EmitDefaultValue=false)]
        public decimal? CheckInInterval { get; set; }

        /// <summary>
        /// The number of GPS points to send with each transmission. A packing setting of 3 with an &#39;interval&#39; of 60s will result in points recorded approximately every 20s, but they will only be sent together. This increases the time you have to wait for locations to come through to the server but improves battery life
        /// </summary>
        /// <value>The number of GPS points to send with each transmission. A packing setting of 3 with an &#39;interval&#39; of 60s will result in points recorded approximately every 20s, but they will only be sent together. This increases the time you have to wait for locations to come through to the server but improves battery life</value>
        [DataMember(Name="packing", EmitDefaultValue=false)]
        public decimal? Packing { get; set; }

        /// <summary>
        /// Deprecated. See debounce.
        /// </summary>
        /// <value>Deprecated. See debounce.</value>
        [DataMember(Name="movementSensitivity", EmitDefaultValue=false)]
        public decimal? MovementSensitivity { get; set; }

        /// <summary>
        /// Movement sensitivity on a scale of 1 to 10, with 1 being the most sensitive. It is correlated to the number of consecutive milliseconds the acceleration needs to exceed the movementSensitivity threshold
        /// </summary>
        /// <value>Movement sensitivity on a scale of 1 to 10, with 1 being the most sensitive. It is correlated to the number of consecutive milliseconds the acceleration needs to exceed the movementSensitivity threshold</value>
        [DataMember(Name="debounce", EmitDefaultValue=false)]
        public decimal? Debounce { get; set; }

        /// <summary>
        /// A secondary debounce value. Typically this value is lower or equal to debounce, representing increased sensitivity to movement once the device is already moving.
        /// </summary>
        /// <value>A secondary debounce value. Typically this value is lower or equal to debounce, representing increased sensitivity to movement once the device is already moving.</value>
        [DataMember(Name="movementSensitivity2", EmitDefaultValue=false)]
        public decimal? MovementSensitivity2 { get; set; }

        /// <summary>
        /// Char Bitfield with various flags. Advanced use only.  DisableBluetooth:32 |  Encrypt:128 |  GsmOnWhenAwake:1 |  GsmOnWhenAsleep:2 |  GpsOnWhenAwake:4 |  DisableWifiAccuracyAssist:8 |  RepeatSleep:16 |  DisableWifi:64
        /// </summary>
        /// <value>Char Bitfield with various flags. Advanced use only.  DisableBluetooth:32 |  Encrypt:128 |  GsmOnWhenAwake:1 |  GsmOnWhenAsleep:2 |  GpsOnWhenAwake:4 |  DisableWifiAccuracyAssist:8 |  RepeatSleep:16 |  DisableWifi:64</value>
        [DataMember(Name="behavior", EmitDefaultValue=false)]
        public decimal? Behavior { get; set; }

        /// <summary>
        /// Char Bitfield with various flags. Advanced use only.  StartStopOnly:1 |  LockAwakeOnAlert:2 |  SendSleepLocAfterBtDisconnect:4 | 
        /// </summary>
        /// <value>Char Bitfield with various flags. Advanced use only.  StartStopOnly:1 |  LockAwakeOnAlert:2 |  SendSleepLocAfterBtDisconnect:4 | </value>
        [DataMember(Name="modeControl", EmitDefaultValue=false)]
        public decimal? ModeControl { get; set; }

        /// <summary>
        /// How long to let the GPS searches for a lock in seconds before giving up. Max 255s.
        /// </summary>
        /// <value>How long to let the GPS searches for a lock in seconds before giving up. Max 255s.</value>
        [DataMember(Name="gpsTimeout", EmitDefaultValue=false)]
        public decimal? GpsTimeout { get; set; }

        /// <summary>
        /// When the unit first wakes up from sleep, how long to wait before trying to transmit in multiples of 30 seconds. 0 &#x3D; instant, 1 &#x3D; 30s, 2 &#x3D; 60s...   Useful to avoid detection or draining battery inside shielded buildings.
        /// </summary>
        /// <value>When the unit first wakes up from sleep, how long to wait before trying to transmit in multiples of 30 seconds. 0 &#x3D; instant, 1 &#x3D; 30s, 2 &#x3D; 60s...   Useful to avoid detection or draining battery inside shielded buildings.</value>
        [DataMember(Name="transmitTimeout", EmitDefaultValue=false)]
        public decimal? TransmitTimeout { get; set; }

        /// <summary>
        /// How long to let the GPS stabilise in seconds once a lock is achieved before sending the position. Higher values may increase accuracy.
        /// </summary>
        /// <value>How long to let the GPS stabilise in seconds once a lock is achieved before sending the position. Higher values may increase accuracy.</value>
        [DataMember(Name="gpsStabilize", EmitDefaultValue=false)]
        public decimal? GpsStabilize { get; set; }

        /// <summary>
        /// If a safe-zone is used, how often to check the wifi &amp; gps to see if its still inside it (only applies when motion is detected)
        /// </summary>
        /// <value>If a safe-zone is used, how often to check the wifi &amp; gps to see if its still inside it (only applies when motion is detected)</value>
        [DataMember(Name="gpsCheckInterval", EmitDefaultValue=false)]
        public decimal? GpsCheckInterval { get; set; }

        /// <summary>
        /// The total amount of time in seconds the unit has to be stationary for before deeming the journey over and switching to sleep mode
        /// </summary>
        /// <value>The total amount of time in seconds the unit has to be stationary for before deeming the journey over and switching to sleep mode</value>
        [DataMember(Name="stopTimeout", EmitDefaultValue=false)]
        public decimal? StopTimeout { get; set; }

        /// <summary>
        /// Reserved for internal use.
        /// </summary>
        /// <value>Reserved for internal use.</value>
        [DataMember(Name="tolerancePercentage", EmitDefaultValue=false)]
        public decimal? TolerancePercentage { get; set; }

        /// <summary>
        /// Gets or Sets ReasonsToWake
        /// </summary>
        [DataMember(Name="reasonsToWake", EmitDefaultValue=false)]
        public List<Object> ReasonsToWake { get; set; }

        /// <summary>
        /// Set to any non null date to indicate the configuration should be pushed to the device when it next connects
        /// </summary>
        /// <value>Set to any non null date to indicate the configuration should be pushed to the device when it next connects</value>
        [DataMember(Name="modified", EmitDefaultValue=false)]
        public DateTime? Modified { get; set; }

        /// <summary>
        /// Internal use.   Used with otaFW. Set to true to force the unit to upgrade on next connection (rather than waiting for a sleep connection
        /// </summary>
        /// <value>Internal use.   Used with otaFW. Set to true to force the unit to upgrade on next connection (rather than waiting for a sleep connection</value>
        [DataMember(Name="forceFw", EmitDefaultValue=false)]
        public bool? ForceFw { get; set; }

        /// <summary>
        /// Indicates the last time the settings were sent to the device
        /// </summary>
        /// <value>Indicates the last time the settings were sent to the device</value>
        [DataMember(Name="receivedAt", EmitDefaultValue=false)]
        public DateTime? ReceivedAt { get; set; }

        /// <summary>
        /// Non NULL values cause unit to restart on next connection   0 &#x3D; Normal reboot   1 &#x3D; Clear settings cache and restart   2 &#x3D; Clear cache and bluetooth connection data, then restart
        /// </summary>
        /// <value>Non NULL values cause unit to restart on next connection   0 &#x3D; Normal reboot   1 &#x3D; Clear settings cache and restart   2 &#x3D; Clear cache and bluetooth connection data, then restart</value>
        [DataMember(Name="reset", EmitDefaultValue=false)]
        public decimal? Reset { get; set; }

        /// <summary>
        /// Internal use. Set to 0 when changing otaFW
        /// </summary>
        /// <value>Internal use. Set to 0 when changing otaFW</value>
        [DataMember(Name="flashTryCount", EmitDefaultValue=false)]
        public decimal? FlashTryCount { get; set; }

        /// <summary>
        /// WiFi network name to use as a Safe-zone. When this network is visible, stay asleep
        /// </summary>
        /// <value>WiFi network name to use as a Safe-zone. When this network is visible, stay asleep</value>
        [DataMember(Name="homeWifiNetwork", EmitDefaultValue=false)]
        public string HomeWifiNetwork { get; set; }

        /// <summary>
        /// What to do when the unit wakes up (ie is moved and not in a safe-zone). Options are &#39;available&#39; (lost and found), and &#39;normal&#39; (tracking)
        /// </summary>
        /// <value>What to do when the unit wakes up (ie is moved and not in a safe-zone). Options are &#39;available&#39; (lost and found), and &#39;normal&#39; (tracking)</value>
        [DataMember(Name="wakeAction", EmitDefaultValue=false)]
        public string WakeAction { get; set; }

        /// <summary>
        /// Deprecated
        /// </summary>
        /// <value>Deprecated</value>
        [DataMember(Name="onDemandTime", EmitDefaultValue=false)]
        public decimal? OnDemandTime { get; set; }

        /// <summary>
        /// What to do when the button is pressed or the unit is dropped. Options are &#39;available&#39; (stay registered on the mobile network), &#39;nothing&#39; (one transmission) and  &#39;lockOn&#39; (keep transmitting at &#39;interval&#39; until instructed otherwise
        /// </summary>
        /// <value>What to do when the button is pressed or the unit is dropped. Options are &#39;available&#39; (stay registered on the mobile network), &#39;nothing&#39; (one transmission) and  &#39;lockOn&#39; (keep transmitting at &#39;interval&#39; until instructed otherwise</value>
        [DataMember(Name="alertAction", EmitDefaultValue=false)]
        public string AlertAction { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public decimal? Id { get; set; }

        /// <summary>
        /// Gets or Sets DeviceId
        /// </summary>
        [DataMember(Name="deviceId", EmitDefaultValue=false)]
        public decimal? DeviceId { get; set; }

        /// <summary>
        /// Gets or Sets SafeZoneId
        /// </summary>
        [DataMember(Name="safeZoneId", EmitDefaultValue=false)]
        public decimal? SafeZoneId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeviceConfig {\n");
            sb.Append("  CurrentFW: ").Append(CurrentFW).Append("\n");
            sb.Append("  OtaFW: ").Append(OtaFW).Append("\n");
            sb.Append("  Interval: ").Append(Interval).Append("\n");
            sb.Append("  SleepInterval: ").Append(SleepInterval).Append("\n");
            sb.Append("  CheckInInterval: ").Append(CheckInInterval).Append("\n");
            sb.Append("  Packing: ").Append(Packing).Append("\n");
            sb.Append("  MovementSensitivity: ").Append(MovementSensitivity).Append("\n");
            sb.Append("  Debounce: ").Append(Debounce).Append("\n");
            sb.Append("  MovementSensitivity2: ").Append(MovementSensitivity2).Append("\n");
            sb.Append("  Behavior: ").Append(Behavior).Append("\n");
            sb.Append("  ModeControl: ").Append(ModeControl).Append("\n");
            sb.Append("  GpsTimeout: ").Append(GpsTimeout).Append("\n");
            sb.Append("  TransmitTimeout: ").Append(TransmitTimeout).Append("\n");
            sb.Append("  GpsStabilize: ").Append(GpsStabilize).Append("\n");
            sb.Append("  GpsCheckInterval: ").Append(GpsCheckInterval).Append("\n");
            sb.Append("  StopTimeout: ").Append(StopTimeout).Append("\n");
            sb.Append("  TolerancePercentage: ").Append(TolerancePercentage).Append("\n");
            sb.Append("  ReasonsToWake: ").Append(ReasonsToWake).Append("\n");
            sb.Append("  Modified: ").Append(Modified).Append("\n");
            sb.Append("  ForceFw: ").Append(ForceFw).Append("\n");
            sb.Append("  ReceivedAt: ").Append(ReceivedAt).Append("\n");
            sb.Append("  Reset: ").Append(Reset).Append("\n");
            sb.Append("  FlashTryCount: ").Append(FlashTryCount).Append("\n");
            sb.Append("  HomeWifiNetwork: ").Append(HomeWifiNetwork).Append("\n");
            sb.Append("  WakeAction: ").Append(WakeAction).Append("\n");
            sb.Append("  OnDemandTime: ").Append(OnDemandTime).Append("\n");
            sb.Append("  AlertAction: ").Append(AlertAction).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DeviceId: ").Append(DeviceId).Append("\n");
            sb.Append("  SafeZoneId: ").Append(SafeZoneId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeviceConfig);
        }

        /// <summary>
        /// Returns true if DeviceConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of DeviceConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeviceConfig input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrentFW == input.CurrentFW ||
                    (this.CurrentFW != null &&
                    this.CurrentFW.Equals(input.CurrentFW))
                ) && 
                (
                    this.OtaFW == input.OtaFW ||
                    (this.OtaFW != null &&
                    this.OtaFW.Equals(input.OtaFW))
                ) && 
                (
                    this.Interval == input.Interval ||
                    (this.Interval != null &&
                    this.Interval.Equals(input.Interval))
                ) && 
                (
                    this.SleepInterval == input.SleepInterval ||
                    (this.SleepInterval != null &&
                    this.SleepInterval.Equals(input.SleepInterval))
                ) && 
                (
                    this.CheckInInterval == input.CheckInInterval ||
                    (this.CheckInInterval != null &&
                    this.CheckInInterval.Equals(input.CheckInInterval))
                ) && 
                (
                    this.Packing == input.Packing ||
                    (this.Packing != null &&
                    this.Packing.Equals(input.Packing))
                ) && 
                (
                    this.MovementSensitivity == input.MovementSensitivity ||
                    (this.MovementSensitivity != null &&
                    this.MovementSensitivity.Equals(input.MovementSensitivity))
                ) && 
                (
                    this.Debounce == input.Debounce ||
                    (this.Debounce != null &&
                    this.Debounce.Equals(input.Debounce))
                ) && 
                (
                    this.MovementSensitivity2 == input.MovementSensitivity2 ||
                    (this.MovementSensitivity2 != null &&
                    this.MovementSensitivity2.Equals(input.MovementSensitivity2))
                ) && 
                (
                    this.Behavior == input.Behavior ||
                    (this.Behavior != null &&
                    this.Behavior.Equals(input.Behavior))
                ) && 
                (
                    this.ModeControl == input.ModeControl ||
                    (this.ModeControl != null &&
                    this.ModeControl.Equals(input.ModeControl))
                ) && 
                (
                    this.GpsTimeout == input.GpsTimeout ||
                    (this.GpsTimeout != null &&
                    this.GpsTimeout.Equals(input.GpsTimeout))
                ) && 
                (
                    this.TransmitTimeout == input.TransmitTimeout ||
                    (this.TransmitTimeout != null &&
                    this.TransmitTimeout.Equals(input.TransmitTimeout))
                ) && 
                (
                    this.GpsStabilize == input.GpsStabilize ||
                    (this.GpsStabilize != null &&
                    this.GpsStabilize.Equals(input.GpsStabilize))
                ) && 
                (
                    this.GpsCheckInterval == input.GpsCheckInterval ||
                    (this.GpsCheckInterval != null &&
                    this.GpsCheckInterval.Equals(input.GpsCheckInterval))
                ) && 
                (
                    this.StopTimeout == input.StopTimeout ||
                    (this.StopTimeout != null &&
                    this.StopTimeout.Equals(input.StopTimeout))
                ) && 
                (
                    this.TolerancePercentage == input.TolerancePercentage ||
                    (this.TolerancePercentage != null &&
                    this.TolerancePercentage.Equals(input.TolerancePercentage))
                ) && 
                (
                    this.ReasonsToWake == input.ReasonsToWake ||
                    this.ReasonsToWake != null &&
                    this.ReasonsToWake.SequenceEqual(input.ReasonsToWake)
                ) && 
                (
                    this.Modified == input.Modified ||
                    (this.Modified != null &&
                    this.Modified.Equals(input.Modified))
                ) && 
                (
                    this.ForceFw == input.ForceFw ||
                    (this.ForceFw != null &&
                    this.ForceFw.Equals(input.ForceFw))
                ) && 
                (
                    this.ReceivedAt == input.ReceivedAt ||
                    (this.ReceivedAt != null &&
                    this.ReceivedAt.Equals(input.ReceivedAt))
                ) && 
                (
                    this.Reset == input.Reset ||
                    (this.Reset != null &&
                    this.Reset.Equals(input.Reset))
                ) && 
                (
                    this.FlashTryCount == input.FlashTryCount ||
                    (this.FlashTryCount != null &&
                    this.FlashTryCount.Equals(input.FlashTryCount))
                ) && 
                (
                    this.HomeWifiNetwork == input.HomeWifiNetwork ||
                    (this.HomeWifiNetwork != null &&
                    this.HomeWifiNetwork.Equals(input.HomeWifiNetwork))
                ) && 
                (
                    this.WakeAction == input.WakeAction ||
                    (this.WakeAction != null &&
                    this.WakeAction.Equals(input.WakeAction))
                ) && 
                (
                    this.OnDemandTime == input.OnDemandTime ||
                    (this.OnDemandTime != null &&
                    this.OnDemandTime.Equals(input.OnDemandTime))
                ) && 
                (
                    this.AlertAction == input.AlertAction ||
                    (this.AlertAction != null &&
                    this.AlertAction.Equals(input.AlertAction))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DeviceId == input.DeviceId ||
                    (this.DeviceId != null &&
                    this.DeviceId.Equals(input.DeviceId))
                ) && 
                (
                    this.SafeZoneId == input.SafeZoneId ||
                    (this.SafeZoneId != null &&
                    this.SafeZoneId.Equals(input.SafeZoneId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrentFW != null)
                    hashCode = hashCode * 59 + this.CurrentFW.GetHashCode();
                if (this.OtaFW != null)
                    hashCode = hashCode * 59 + this.OtaFW.GetHashCode();
                if (this.Interval != null)
                    hashCode = hashCode * 59 + this.Interval.GetHashCode();
                if (this.SleepInterval != null)
                    hashCode = hashCode * 59 + this.SleepInterval.GetHashCode();
                if (this.CheckInInterval != null)
                    hashCode = hashCode * 59 + this.CheckInInterval.GetHashCode();
                if (this.Packing != null)
                    hashCode = hashCode * 59 + this.Packing.GetHashCode();
                if (this.MovementSensitivity != null)
                    hashCode = hashCode * 59 + this.MovementSensitivity.GetHashCode();
                if (this.Debounce != null)
                    hashCode = hashCode * 59 + this.Debounce.GetHashCode();
                if (this.MovementSensitivity2 != null)
                    hashCode = hashCode * 59 + this.MovementSensitivity2.GetHashCode();
                if (this.Behavior != null)
                    hashCode = hashCode * 59 + this.Behavior.GetHashCode();
                if (this.ModeControl != null)
                    hashCode = hashCode * 59 + this.ModeControl.GetHashCode();
                if (this.GpsTimeout != null)
                    hashCode = hashCode * 59 + this.GpsTimeout.GetHashCode();
                if (this.TransmitTimeout != null)
                    hashCode = hashCode * 59 + this.TransmitTimeout.GetHashCode();
                if (this.GpsStabilize != null)
                    hashCode = hashCode * 59 + this.GpsStabilize.GetHashCode();
                if (this.GpsCheckInterval != null)
                    hashCode = hashCode * 59 + this.GpsCheckInterval.GetHashCode();
                if (this.StopTimeout != null)
                    hashCode = hashCode * 59 + this.StopTimeout.GetHashCode();
                if (this.TolerancePercentage != null)
                    hashCode = hashCode * 59 + this.TolerancePercentage.GetHashCode();
                if (this.ReasonsToWake != null)
                    hashCode = hashCode * 59 + this.ReasonsToWake.GetHashCode();
                if (this.Modified != null)
                    hashCode = hashCode * 59 + this.Modified.GetHashCode();
                if (this.ForceFw != null)
                    hashCode = hashCode * 59 + this.ForceFw.GetHashCode();
                if (this.ReceivedAt != null)
                    hashCode = hashCode * 59 + this.ReceivedAt.GetHashCode();
                if (this.Reset != null)
                    hashCode = hashCode * 59 + this.Reset.GetHashCode();
                if (this.FlashTryCount != null)
                    hashCode = hashCode * 59 + this.FlashTryCount.GetHashCode();
                if (this.HomeWifiNetwork != null)
                    hashCode = hashCode * 59 + this.HomeWifiNetwork.GetHashCode();
                if (this.WakeAction != null)
                    hashCode = hashCode * 59 + this.WakeAction.GetHashCode();
                if (this.OnDemandTime != null)
                    hashCode = hashCode * 59 + this.OnDemandTime.GetHashCode();
                if (this.AlertAction != null)
                    hashCode = hashCode * 59 + this.AlertAction.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.DeviceId != null)
                    hashCode = hashCode * 59 + this.DeviceId.GetHashCode();
                if (this.SafeZoneId != null)
                    hashCode = hashCode * 59 + this.SafeZoneId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // HomeWifiNetwork (string) maxLength
            if(this.HomeWifiNetwork != null && this.HomeWifiNetwork.Length > 127)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HomeWifiNetwork, length must be less than 127.", new [] { "HomeWifiNetwork" });
            }

            yield break;
        }
    }

}
