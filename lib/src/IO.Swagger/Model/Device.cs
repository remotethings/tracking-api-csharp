/* 
 * TrackingAPI
 *
 * API for retrieving tracking data and changing settings on LightBug & RemoteThings tracking devices
 *
 * OpenAPI spec version: 1.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Device
    /// </summary>
    [DataContract]
    public partial class Device :  IEquatable<Device>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Device" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Device() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Device" /> class.
        /// </summary>
        /// <param name="imei">imei.</param>
        /// <param name="iccid">iccid.</param>
        /// <param name="loraId">loraId.</param>
        /// <param name="imsi">imsi.</param>
        /// <param name="btMac">Bluetooth MAC Address as 48bit number.</param>
        /// <param name="btMacAddress">Bluetooth MAC Address in standard format.</param>
        /// <param name="uwbId">UWB Address as 32bit number.</param>
        /// <param name="serial">serial.</param>
        /// <param name="type">type.</param>
        /// <param name="expires">expires.</param>
        /// <param name="lastConnection">lastConnection.</param>
        /// <param name="firstSeen">firstSeen (required).</param>
        /// <param name="mode">mode (default to &quot;default&quot;).</param>
        /// <param name="name">name.</param>
        /// <param name="batteryVoltage">batteryVoltage.</param>
        /// <param name="batteryPct">batteryPct.</param>
        /// <param name="batteryType">batteryType (default to &quot;LIO&quot;).</param>
        /// <param name="tags">tags.</param>
        /// <param name="currentMode">Indicates last known device state. 0 &#x3D; awake, 1 &#x3D; sleep, 6 &#x3D; flight mode.</param>
        /// <param name="color">color (default to &quot;fc7c3d&quot;).</param>
        /// <param name="saveToWeb">saveToWeb (default to false).</param>
        /// <param name="active">active (default to false).</param>
        /// <param name="deepSleep">deepSleep (default to false).</param>
        /// <param name="simstate">simstate (default to &quot;active&quot;).</param>
        /// <param name="stripeSubscription">stripeSubscription.</param>
        /// <param name="subscriptionType">subscriptionType.</param>
        /// <param name="meta">meta.</param>
        /// <param name="resellerId">resellerId.</param>
        /// <param name="resellerPlanId">resellerPlanId.</param>
        /// <param name="btPasskey">btPasskey.</param>
        /// <param name="simType">simType (default to &quot;JT&quot;).</param>
        /// <param name="id">id.</param>
        /// <param name="ownerId">ownerId.</param>
        /// <param name="securePhoneId">securePhoneId.</param>
        public Device(string imei = default(string), string iccid = default(string), decimal? loraId = default(decimal?), string imsi = default(string), decimal? btMac = default(decimal?), string btMacAddress = default(string), decimal? uwbId = default(decimal?), string serial = default(string), string type = default(string), DateTime? expires = default(DateTime?), DateTime? lastConnection = default(DateTime?), DateTime? firstSeen = default(DateTime?), string mode = "default", string name = default(string), decimal? batteryVoltage = default(decimal?), decimal? batteryPct = default(decimal?), string batteryType = "LIO", List<string> tags = default(List<string>), decimal? currentMode = default(decimal?), string color = "fc7c3d", bool? saveToWeb = false, bool? active = false, bool? deepSleep = false, string simstate = "active", string stripeSubscription = default(string), string subscriptionType = default(string), Object meta = default(Object), decimal? resellerId = default(decimal?), decimal? resellerPlanId = default(decimal?), decimal? btPasskey = default(decimal?), string simType = "JT", decimal? id = default(decimal?), decimal? ownerId = default(decimal?), decimal? securePhoneId = default(decimal?))
        {
            // to ensure "firstSeen" is required (not null)
            if (firstSeen == null)
            {
                throw new InvalidDataException("firstSeen is a required property for Device and cannot be null");
            }
            else
            {
                this.FirstSeen = firstSeen;
            }
            this.Imei = imei;
            this.Iccid = iccid;
            this.LoraId = loraId;
            this.Imsi = imsi;
            this.BtMac = btMac;
            this.BtMacAddress = btMacAddress;
            this.UwbId = uwbId;
            this.Serial = serial;
            this.Type = type;
            this.Expires = expires;
            this.LastConnection = lastConnection;
            // use default value if no "mode" provided
            if (mode == null)
            {
                this.Mode = "default";
            }
            else
            {
                this.Mode = mode;
            }
            this.Name = name;
            this.BatteryVoltage = batteryVoltage;
            this.BatteryPct = batteryPct;
            // use default value if no "batteryType" provided
            if (batteryType == null)
            {
                this.BatteryType = "LIO";
            }
            else
            {
                this.BatteryType = batteryType;
            }
            this.Tags = tags;
            this.CurrentMode = currentMode;
            // use default value if no "color" provided
            if (color == null)
            {
                this.Color = "fc7c3d";
            }
            else
            {
                this.Color = color;
            }
            // use default value if no "saveToWeb" provided
            if (saveToWeb == null)
            {
                this.SaveToWeb = false;
            }
            else
            {
                this.SaveToWeb = saveToWeb;
            }
            // use default value if no "active" provided
            if (active == null)
            {
                this.Active = false;
            }
            else
            {
                this.Active = active;
            }
            // use default value if no "deepSleep" provided
            if (deepSleep == null)
            {
                this.DeepSleep = false;
            }
            else
            {
                this.DeepSleep = deepSleep;
            }
            // use default value if no "simstate" provided
            if (simstate == null)
            {
                this.Simstate = "active";
            }
            else
            {
                this.Simstate = simstate;
            }
            this.StripeSubscription = stripeSubscription;
            this.SubscriptionType = subscriptionType;
            this.Meta = meta;
            this.ResellerId = resellerId;
            this.ResellerPlanId = resellerPlanId;
            this.BtPasskey = btPasskey;
            // use default value if no "simType" provided
            if (simType == null)
            {
                this.SimType = "JT";
            }
            else
            {
                this.SimType = simType;
            }
            this.Id = id;
            this.OwnerId = ownerId;
            this.SecurePhoneId = securePhoneId;
        }
        
        /// <summary>
        /// Gets or Sets Imei
        /// </summary>
        [DataMember(Name="imei", EmitDefaultValue=false)]
        public string Imei { get; set; }

        /// <summary>
        /// Gets or Sets Iccid
        /// </summary>
        [DataMember(Name="iccid", EmitDefaultValue=false)]
        public string Iccid { get; set; }

        /// <summary>
        /// Gets or Sets LoraId
        /// </summary>
        [DataMember(Name="loraId", EmitDefaultValue=false)]
        public decimal? LoraId { get; set; }

        /// <summary>
        /// Gets or Sets Imsi
        /// </summary>
        [DataMember(Name="imsi", EmitDefaultValue=false)]
        public string Imsi { get; set; }

        /// <summary>
        /// Bluetooth MAC Address as 48bit number
        /// </summary>
        /// <value>Bluetooth MAC Address as 48bit number</value>
        [DataMember(Name="btMac", EmitDefaultValue=false)]
        public decimal? BtMac { get; set; }

        /// <summary>
        /// Bluetooth MAC Address in standard format
        /// </summary>
        /// <value>Bluetooth MAC Address in standard format</value>
        [DataMember(Name="btMacAddress", EmitDefaultValue=false)]
        public string BtMacAddress { get; set; }

        /// <summary>
        /// UWB Address as 32bit number
        /// </summary>
        /// <value>UWB Address as 32bit number</value>
        [DataMember(Name="uwbId", EmitDefaultValue=false)]
        public decimal? UwbId { get; set; }

        /// <summary>
        /// Gets or Sets Serial
        /// </summary>
        [DataMember(Name="serial", EmitDefaultValue=false)]
        public string Serial { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Expires
        /// </summary>
        [DataMember(Name="expires", EmitDefaultValue=false)]
        public DateTime? Expires { get; set; }

        /// <summary>
        /// Gets or Sets LastConnection
        /// </summary>
        [DataMember(Name="lastConnection", EmitDefaultValue=false)]
        public DateTime? LastConnection { get; set; }

        /// <summary>
        /// Gets or Sets FirstSeen
        /// </summary>
        [DataMember(Name="firstSeen", EmitDefaultValue=false)]
        public DateTime? FirstSeen { get; set; }

        /// <summary>
        /// Gets or Sets Mode
        /// </summary>
        [DataMember(Name="mode", EmitDefaultValue=false)]
        public string Mode { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets BatteryVoltage
        /// </summary>
        [DataMember(Name="batteryVoltage", EmitDefaultValue=false)]
        public decimal? BatteryVoltage { get; set; }

        /// <summary>
        /// Gets or Sets BatteryPct
        /// </summary>
        [DataMember(Name="batteryPct", EmitDefaultValue=false)]
        public decimal? BatteryPct { get; set; }

        /// <summary>
        /// Gets or Sets BatteryType
        /// </summary>
        [DataMember(Name="batteryType", EmitDefaultValue=false)]
        public string BatteryType { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Indicates last known device state. 0 &#x3D; awake, 1 &#x3D; sleep, 6 &#x3D; flight mode
        /// </summary>
        /// <value>Indicates last known device state. 0 &#x3D; awake, 1 &#x3D; sleep, 6 &#x3D; flight mode</value>
        [DataMember(Name="currentMode", EmitDefaultValue=false)]
        public decimal? CurrentMode { get; set; }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [DataMember(Name="color", EmitDefaultValue=false)]
        public string Color { get; set; }

        /// <summary>
        /// Gets or Sets SaveToWeb
        /// </summary>
        [DataMember(Name="saveToWeb", EmitDefaultValue=false)]
        public bool? SaveToWeb { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool? Active { get; set; }

        /// <summary>
        /// Gets or Sets DeepSleep
        /// </summary>
        [DataMember(Name="deepSleep", EmitDefaultValue=false)]
        public bool? DeepSleep { get; set; }

        /// <summary>
        /// Gets or Sets Simstate
        /// </summary>
        [DataMember(Name="simstate", EmitDefaultValue=false)]
        public string Simstate { get; set; }

        /// <summary>
        /// Gets or Sets StripeSubscription
        /// </summary>
        [DataMember(Name="stripeSubscription", EmitDefaultValue=false)]
        public string StripeSubscription { get; set; }

        /// <summary>
        /// Gets or Sets SubscriptionType
        /// </summary>
        [DataMember(Name="subscriptionType", EmitDefaultValue=false)]
        public string SubscriptionType { get; set; }

        /// <summary>
        /// Gets or Sets Meta
        /// </summary>
        [DataMember(Name="meta", EmitDefaultValue=false)]
        public Object Meta { get; set; }

        /// <summary>
        /// Gets or Sets ResellerId
        /// </summary>
        [DataMember(Name="resellerId", EmitDefaultValue=false)]
        public decimal? ResellerId { get; set; }

        /// <summary>
        /// Gets or Sets ResellerPlanId
        /// </summary>
        [DataMember(Name="resellerPlanId", EmitDefaultValue=false)]
        public decimal? ResellerPlanId { get; set; }

        /// <summary>
        /// Gets or Sets BtPasskey
        /// </summary>
        [DataMember(Name="btPasskey", EmitDefaultValue=false)]
        public decimal? BtPasskey { get; set; }

        /// <summary>
        /// Gets or Sets SimType
        /// </summary>
        [DataMember(Name="simType", EmitDefaultValue=false)]
        public string SimType { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public decimal? Id { get; set; }

        /// <summary>
        /// Gets or Sets OwnerId
        /// </summary>
        [DataMember(Name="ownerId", EmitDefaultValue=false)]
        public decimal? OwnerId { get; set; }

        /// <summary>
        /// Gets or Sets SecurePhoneId
        /// </summary>
        [DataMember(Name="securePhoneId", EmitDefaultValue=false)]
        public decimal? SecurePhoneId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Device {\n");
            sb.Append("  Imei: ").Append(Imei).Append("\n");
            sb.Append("  Iccid: ").Append(Iccid).Append("\n");
            sb.Append("  LoraId: ").Append(LoraId).Append("\n");
            sb.Append("  Imsi: ").Append(Imsi).Append("\n");
            sb.Append("  BtMac: ").Append(BtMac).Append("\n");
            sb.Append("  BtMacAddress: ").Append(BtMacAddress).Append("\n");
            sb.Append("  UwbId: ").Append(UwbId).Append("\n");
            sb.Append("  Serial: ").Append(Serial).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Expires: ").Append(Expires).Append("\n");
            sb.Append("  LastConnection: ").Append(LastConnection).Append("\n");
            sb.Append("  FirstSeen: ").Append(FirstSeen).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  BatteryVoltage: ").Append(BatteryVoltage).Append("\n");
            sb.Append("  BatteryPct: ").Append(BatteryPct).Append("\n");
            sb.Append("  BatteryType: ").Append(BatteryType).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  CurrentMode: ").Append(CurrentMode).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  SaveToWeb: ").Append(SaveToWeb).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  DeepSleep: ").Append(DeepSleep).Append("\n");
            sb.Append("  Simstate: ").Append(Simstate).Append("\n");
            sb.Append("  StripeSubscription: ").Append(StripeSubscription).Append("\n");
            sb.Append("  SubscriptionType: ").Append(SubscriptionType).Append("\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("  ResellerId: ").Append(ResellerId).Append("\n");
            sb.Append("  ResellerPlanId: ").Append(ResellerPlanId).Append("\n");
            sb.Append("  BtPasskey: ").Append(BtPasskey).Append("\n");
            sb.Append("  SimType: ").Append(SimType).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  SecurePhoneId: ").Append(SecurePhoneId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Device);
        }

        /// <summary>
        /// Returns true if Device instances are equal
        /// </summary>
        /// <param name="input">Instance of Device to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Device input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Imei == input.Imei ||
                    (this.Imei != null &&
                    this.Imei.Equals(input.Imei))
                ) && 
                (
                    this.Iccid == input.Iccid ||
                    (this.Iccid != null &&
                    this.Iccid.Equals(input.Iccid))
                ) && 
                (
                    this.LoraId == input.LoraId ||
                    (this.LoraId != null &&
                    this.LoraId.Equals(input.LoraId))
                ) && 
                (
                    this.Imsi == input.Imsi ||
                    (this.Imsi != null &&
                    this.Imsi.Equals(input.Imsi))
                ) && 
                (
                    this.BtMac == input.BtMac ||
                    (this.BtMac != null &&
                    this.BtMac.Equals(input.BtMac))
                ) && 
                (
                    this.BtMacAddress == input.BtMacAddress ||
                    (this.BtMacAddress != null &&
                    this.BtMacAddress.Equals(input.BtMacAddress))
                ) && 
                (
                    this.UwbId == input.UwbId ||
                    (this.UwbId != null &&
                    this.UwbId.Equals(input.UwbId))
                ) && 
                (
                    this.Serial == input.Serial ||
                    (this.Serial != null &&
                    this.Serial.Equals(input.Serial))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Expires == input.Expires ||
                    (this.Expires != null &&
                    this.Expires.Equals(input.Expires))
                ) && 
                (
                    this.LastConnection == input.LastConnection ||
                    (this.LastConnection != null &&
                    this.LastConnection.Equals(input.LastConnection))
                ) && 
                (
                    this.FirstSeen == input.FirstSeen ||
                    (this.FirstSeen != null &&
                    this.FirstSeen.Equals(input.FirstSeen))
                ) && 
                (
                    this.Mode == input.Mode ||
                    (this.Mode != null &&
                    this.Mode.Equals(input.Mode))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.BatteryVoltage == input.BatteryVoltage ||
                    (this.BatteryVoltage != null &&
                    this.BatteryVoltage.Equals(input.BatteryVoltage))
                ) && 
                (
                    this.BatteryPct == input.BatteryPct ||
                    (this.BatteryPct != null &&
                    this.BatteryPct.Equals(input.BatteryPct))
                ) && 
                (
                    this.BatteryType == input.BatteryType ||
                    (this.BatteryType != null &&
                    this.BatteryType.Equals(input.BatteryType))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.CurrentMode == input.CurrentMode ||
                    (this.CurrentMode != null &&
                    this.CurrentMode.Equals(input.CurrentMode))
                ) && 
                (
                    this.Color == input.Color ||
                    (this.Color != null &&
                    this.Color.Equals(input.Color))
                ) && 
                (
                    this.SaveToWeb == input.SaveToWeb ||
                    (this.SaveToWeb != null &&
                    this.SaveToWeb.Equals(input.SaveToWeb))
                ) && 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && 
                (
                    this.DeepSleep == input.DeepSleep ||
                    (this.DeepSleep != null &&
                    this.DeepSleep.Equals(input.DeepSleep))
                ) && 
                (
                    this.Simstate == input.Simstate ||
                    (this.Simstate != null &&
                    this.Simstate.Equals(input.Simstate))
                ) && 
                (
                    this.StripeSubscription == input.StripeSubscription ||
                    (this.StripeSubscription != null &&
                    this.StripeSubscription.Equals(input.StripeSubscription))
                ) && 
                (
                    this.SubscriptionType == input.SubscriptionType ||
                    (this.SubscriptionType != null &&
                    this.SubscriptionType.Equals(input.SubscriptionType))
                ) && 
                (
                    this.Meta == input.Meta ||
                    (this.Meta != null &&
                    this.Meta.Equals(input.Meta))
                ) && 
                (
                    this.ResellerId == input.ResellerId ||
                    (this.ResellerId != null &&
                    this.ResellerId.Equals(input.ResellerId))
                ) && 
                (
                    this.ResellerPlanId == input.ResellerPlanId ||
                    (this.ResellerPlanId != null &&
                    this.ResellerPlanId.Equals(input.ResellerPlanId))
                ) && 
                (
                    this.BtPasskey == input.BtPasskey ||
                    (this.BtPasskey != null &&
                    this.BtPasskey.Equals(input.BtPasskey))
                ) && 
                (
                    this.SimType == input.SimType ||
                    (this.SimType != null &&
                    this.SimType.Equals(input.SimType))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.OwnerId == input.OwnerId ||
                    (this.OwnerId != null &&
                    this.OwnerId.Equals(input.OwnerId))
                ) && 
                (
                    this.SecurePhoneId == input.SecurePhoneId ||
                    (this.SecurePhoneId != null &&
                    this.SecurePhoneId.Equals(input.SecurePhoneId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Imei != null)
                    hashCode = hashCode * 59 + this.Imei.GetHashCode();
                if (this.Iccid != null)
                    hashCode = hashCode * 59 + this.Iccid.GetHashCode();
                if (this.LoraId != null)
                    hashCode = hashCode * 59 + this.LoraId.GetHashCode();
                if (this.Imsi != null)
                    hashCode = hashCode * 59 + this.Imsi.GetHashCode();
                if (this.BtMac != null)
                    hashCode = hashCode * 59 + this.BtMac.GetHashCode();
                if (this.BtMacAddress != null)
                    hashCode = hashCode * 59 + this.BtMacAddress.GetHashCode();
                if (this.UwbId != null)
                    hashCode = hashCode * 59 + this.UwbId.GetHashCode();
                if (this.Serial != null)
                    hashCode = hashCode * 59 + this.Serial.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Expires != null)
                    hashCode = hashCode * 59 + this.Expires.GetHashCode();
                if (this.LastConnection != null)
                    hashCode = hashCode * 59 + this.LastConnection.GetHashCode();
                if (this.FirstSeen != null)
                    hashCode = hashCode * 59 + this.FirstSeen.GetHashCode();
                if (this.Mode != null)
                    hashCode = hashCode * 59 + this.Mode.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.BatteryVoltage != null)
                    hashCode = hashCode * 59 + this.BatteryVoltage.GetHashCode();
                if (this.BatteryPct != null)
                    hashCode = hashCode * 59 + this.BatteryPct.GetHashCode();
                if (this.BatteryType != null)
                    hashCode = hashCode * 59 + this.BatteryType.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.CurrentMode != null)
                    hashCode = hashCode * 59 + this.CurrentMode.GetHashCode();
                if (this.Color != null)
                    hashCode = hashCode * 59 + this.Color.GetHashCode();
                if (this.SaveToWeb != null)
                    hashCode = hashCode * 59 + this.SaveToWeb.GetHashCode();
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.DeepSleep != null)
                    hashCode = hashCode * 59 + this.DeepSleep.GetHashCode();
                if (this.Simstate != null)
                    hashCode = hashCode * 59 + this.Simstate.GetHashCode();
                if (this.StripeSubscription != null)
                    hashCode = hashCode * 59 + this.StripeSubscription.GetHashCode();
                if (this.SubscriptionType != null)
                    hashCode = hashCode * 59 + this.SubscriptionType.GetHashCode();
                if (this.Meta != null)
                    hashCode = hashCode * 59 + this.Meta.GetHashCode();
                if (this.ResellerId != null)
                    hashCode = hashCode * 59 + this.ResellerId.GetHashCode();
                if (this.ResellerPlanId != null)
                    hashCode = hashCode * 59 + this.ResellerPlanId.GetHashCode();
                if (this.BtPasskey != null)
                    hashCode = hashCode * 59 + this.BtPasskey.GetHashCode();
                if (this.SimType != null)
                    hashCode = hashCode * 59 + this.SimType.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.OwnerId != null)
                    hashCode = hashCode * 59 + this.OwnerId.GetHashCode();
                if (this.SecurePhoneId != null)
                    hashCode = hashCode * 59 + this.SecurePhoneId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Imei (string) maxLength
            if(this.Imei != null && this.Imei.Length > 15)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Imei, length must be less than 15.", new [] { "Imei" });
            }

            // BtMacAddress (string) maxLength
            if(this.BtMacAddress != null && this.BtMacAddress.Length > 17)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BtMacAddress, length must be less than 17.", new [] { "BtMacAddress" });
            }

            yield break;
        }
    }

}
