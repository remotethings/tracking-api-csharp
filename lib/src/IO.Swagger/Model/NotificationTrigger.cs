/* 
 * TrackingAPI
 *
 * API for retrieving tracking data and changing settings on LightBug & RemoteThings tracking devices
 *
 * OpenAPI spec version: 1.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// NotificationTrigger
    /// </summary>
    [DataContract]
    public partial class NotificationTrigger : Dictionary<String, Object>,  IEquatable<NotificationTrigger>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationTrigger" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NotificationTrigger() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationTrigger" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="parameters">parameters.</param>
        /// <param name="muteFor">muteFor (required).</param>
        /// <param name="lastTriggered">lastTriggered.</param>
        /// <param name="delivery">delivery (required).</param>
        /// <param name="id">id.</param>
        /// <param name="deviceId">deviceId.</param>
        /// <param name="userId">userId.</param>
        public NotificationTrigger(string name = default(string), string type = default(string), Object parameters = default(Object), decimal? muteFor = default(decimal?), DateTime? lastTriggered = default(DateTime?), Object delivery = default(Object), decimal? id = default(decimal?), decimal? deviceId = default(decimal?), decimal? userId = default(decimal?)) : base()
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for NotificationTrigger and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for NotificationTrigger and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "muteFor" is required (not null)
            if (muteFor == null)
            {
                throw new InvalidDataException("muteFor is a required property for NotificationTrigger and cannot be null");
            }
            else
            {
                this.MuteFor = muteFor;
            }
            // to ensure "delivery" is required (not null)
            if (delivery == null)
            {
                throw new InvalidDataException("delivery is a required property for NotificationTrigger and cannot be null");
            }
            else
            {
                this.Delivery = delivery;
            }
            this.Parameters = parameters;
            this.LastTriggered = lastTriggered;
            this.Id = id;
            this.DeviceId = deviceId;
            this.UserId = userId;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Parameters
        /// </summary>
        [DataMember(Name="parameters", EmitDefaultValue=false)]
        public Object Parameters { get; set; }

        /// <summary>
        /// Gets or Sets MuteFor
        /// </summary>
        [DataMember(Name="muteFor", EmitDefaultValue=false)]
        public decimal? MuteFor { get; set; }

        /// <summary>
        /// Gets or Sets LastTriggered
        /// </summary>
        [DataMember(Name="lastTriggered", EmitDefaultValue=false)]
        public DateTime? LastTriggered { get; set; }

        /// <summary>
        /// Gets or Sets Delivery
        /// </summary>
        [DataMember(Name="delivery", EmitDefaultValue=false)]
        public Object Delivery { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public decimal? Id { get; set; }

        /// <summary>
        /// Gets or Sets DeviceId
        /// </summary>
        [DataMember(Name="deviceId", EmitDefaultValue=false)]
        public decimal? DeviceId { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public decimal? UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NotificationTrigger {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  MuteFor: ").Append(MuteFor).Append("\n");
            sb.Append("  LastTriggered: ").Append(LastTriggered).Append("\n");
            sb.Append("  Delivery: ").Append(Delivery).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DeviceId: ").Append(DeviceId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NotificationTrigger);
        }

        /// <summary>
        /// Returns true if NotificationTrigger instances are equal
        /// </summary>
        /// <param name="input">Instance of NotificationTrigger to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NotificationTrigger input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && base.Equals(input) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && base.Equals(input) && 
                (
                    this.Parameters == input.Parameters ||
                    (this.Parameters != null &&
                    this.Parameters.Equals(input.Parameters))
                ) && base.Equals(input) && 
                (
                    this.MuteFor == input.MuteFor ||
                    (this.MuteFor != null &&
                    this.MuteFor.Equals(input.MuteFor))
                ) && base.Equals(input) && 
                (
                    this.LastTriggered == input.LastTriggered ||
                    (this.LastTriggered != null &&
                    this.LastTriggered.Equals(input.LastTriggered))
                ) && base.Equals(input) && 
                (
                    this.Delivery == input.Delivery ||
                    (this.Delivery != null &&
                    this.Delivery.Equals(input.Delivery))
                ) && base.Equals(input) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && base.Equals(input) && 
                (
                    this.DeviceId == input.DeviceId ||
                    (this.DeviceId != null &&
                    this.DeviceId.Equals(input.DeviceId))
                ) && base.Equals(input) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Parameters != null)
                    hashCode = hashCode * 59 + this.Parameters.GetHashCode();
                if (this.MuteFor != null)
                    hashCode = hashCode * 59 + this.MuteFor.GetHashCode();
                if (this.LastTriggered != null)
                    hashCode = hashCode * 59 + this.LastTriggered.GetHashCode();
                if (this.Delivery != null)
                    hashCode = hashCode * 59 + this.Delivery.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.DeviceId != null)
                    hashCode = hashCode * 59 + this.DeviceId.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
