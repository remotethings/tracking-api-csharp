/* 
 * TrackingAPI
 *
 * API for retrieving tracking data and changing settings on LightBug & RemoteThings tracking devices
 *
 * OpenAPI spec version: 1.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Geofence
    /// </summary>
    [DataContract]
    public partial class Geofence :  IEquatable<Geofence>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Geofence" /> class.
        /// </summary>
        /// <param name="outline">Array of {lat:x,lng:y} objects representing the vertices of the polygon. Do not use with center and radius..</param>
        /// <param name="center">For circular geofences, the center. Property is ignored if outline !&#x3D; null..</param>
        /// <param name="radius">For circular geofences, the radius of the circle in meters. Property is ignored if outline !&#x3D; null..</param>
        /// <param name="type">Grouping value.</param>
        /// <param name="name">name.</param>
        /// <param name="wasInside">If the last point received was inside the geofence. Only updated for notifications (not the safe-zone as that is evaluated on the device) (default to false).</param>
        /// <param name="lastChecked">When the geofence was last evaluated. Only updated for notifications (not the safe-zone as that is evaluated on the device).</param>
        /// <param name="modified">modified (default to false).</param>
        /// <param name="meta">meta.</param>
        /// <param name="foreignId">foreignId.</param>
        /// <param name="id">id.</param>
        /// <param name="deviceId">deviceId.</param>
        /// <param name="configId">configId.</param>
        /// <param name="userId">userId.</param>
        public Geofence(List<Object> outline = default(List<Object>), GeoPoint center = default(GeoPoint), decimal? radius = default(decimal?), string type = default(string), string name = default(string), bool? wasInside = false, DateTime? lastChecked = default(DateTime?), bool? modified = false, Object meta = default(Object), string foreignId = default(string), decimal? id = default(decimal?), decimal? deviceId = default(decimal?), decimal? configId = default(decimal?), decimal? userId = default(decimal?))
        {
            this.Outline = outline;
            this.Center = center;
            this.Radius = radius;
            this.Type = type;
            this.Name = name;
            // use default value if no "wasInside" provided
            if (wasInside == null)
            {
                this.WasInside = false;
            }
            else
            {
                this.WasInside = wasInside;
            }
            this.LastChecked = lastChecked;
            // use default value if no "modified" provided
            if (modified == null)
            {
                this.Modified = false;
            }
            else
            {
                this.Modified = modified;
            }
            this.Meta = meta;
            this.ForeignId = foreignId;
            this.Id = id;
            this.DeviceId = deviceId;
            this.ConfigId = configId;
            this.UserId = userId;
        }
        
        /// <summary>
        /// Array of {lat:x,lng:y} objects representing the vertices of the polygon. Do not use with center and radius.
        /// </summary>
        /// <value>Array of {lat:x,lng:y} objects representing the vertices of the polygon. Do not use with center and radius.</value>
        [DataMember(Name="outline", EmitDefaultValue=false)]
        public List<Object> Outline { get; set; }

        /// <summary>
        /// For circular geofences, the center. Property is ignored if outline !&#x3D; null.
        /// </summary>
        /// <value>For circular geofences, the center. Property is ignored if outline !&#x3D; null.</value>
        [DataMember(Name="center", EmitDefaultValue=false)]
        public GeoPoint Center { get; set; }

        /// <summary>
        /// For circular geofences, the radius of the circle in meters. Property is ignored if outline !&#x3D; null.
        /// </summary>
        /// <value>For circular geofences, the radius of the circle in meters. Property is ignored if outline !&#x3D; null.</value>
        [DataMember(Name="radius", EmitDefaultValue=false)]
        public decimal? Radius { get; set; }

        /// <summary>
        /// Grouping value
        /// </summary>
        /// <value>Grouping value</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// If the last point received was inside the geofence. Only updated for notifications (not the safe-zone as that is evaluated on the device)
        /// </summary>
        /// <value>If the last point received was inside the geofence. Only updated for notifications (not the safe-zone as that is evaluated on the device)</value>
        [DataMember(Name="wasInside", EmitDefaultValue=false)]
        public bool? WasInside { get; set; }

        /// <summary>
        /// When the geofence was last evaluated. Only updated for notifications (not the safe-zone as that is evaluated on the device)
        /// </summary>
        /// <value>When the geofence was last evaluated. Only updated for notifications (not the safe-zone as that is evaluated on the device)</value>
        [DataMember(Name="lastChecked", EmitDefaultValue=false)]
        public DateTime? LastChecked { get; set; }

        /// <summary>
        /// Gets or Sets Modified
        /// </summary>
        [DataMember(Name="modified", EmitDefaultValue=false)]
        public bool? Modified { get; set; }

        /// <summary>
        /// Gets or Sets Meta
        /// </summary>
        [DataMember(Name="meta", EmitDefaultValue=false)]
        public Object Meta { get; set; }

        /// <summary>
        /// Gets or Sets ForeignId
        /// </summary>
        [DataMember(Name="foreignId", EmitDefaultValue=false)]
        public string ForeignId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public decimal? Id { get; set; }

        /// <summary>
        /// Gets or Sets DeviceId
        /// </summary>
        [DataMember(Name="deviceId", EmitDefaultValue=false)]
        public decimal? DeviceId { get; set; }

        /// <summary>
        /// Gets or Sets ConfigId
        /// </summary>
        [DataMember(Name="configId", EmitDefaultValue=false)]
        public decimal? ConfigId { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public decimal? UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Geofence {\n");
            sb.Append("  Outline: ").Append(Outline).Append("\n");
            sb.Append("  Center: ").Append(Center).Append("\n");
            sb.Append("  Radius: ").Append(Radius).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  WasInside: ").Append(WasInside).Append("\n");
            sb.Append("  LastChecked: ").Append(LastChecked).Append("\n");
            sb.Append("  Modified: ").Append(Modified).Append("\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("  ForeignId: ").Append(ForeignId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DeviceId: ").Append(DeviceId).Append("\n");
            sb.Append("  ConfigId: ").Append(ConfigId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Geofence);
        }

        /// <summary>
        /// Returns true if Geofence instances are equal
        /// </summary>
        /// <param name="input">Instance of Geofence to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Geofence input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Outline == input.Outline ||
                    this.Outline != null &&
                    this.Outline.SequenceEqual(input.Outline)
                ) && 
                (
                    this.Center == input.Center ||
                    (this.Center != null &&
                    this.Center.Equals(input.Center))
                ) && 
                (
                    this.Radius == input.Radius ||
                    (this.Radius != null &&
                    this.Radius.Equals(input.Radius))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.WasInside == input.WasInside ||
                    (this.WasInside != null &&
                    this.WasInside.Equals(input.WasInside))
                ) && 
                (
                    this.LastChecked == input.LastChecked ||
                    (this.LastChecked != null &&
                    this.LastChecked.Equals(input.LastChecked))
                ) && 
                (
                    this.Modified == input.Modified ||
                    (this.Modified != null &&
                    this.Modified.Equals(input.Modified))
                ) && 
                (
                    this.Meta == input.Meta ||
                    (this.Meta != null &&
                    this.Meta.Equals(input.Meta))
                ) && 
                (
                    this.ForeignId == input.ForeignId ||
                    (this.ForeignId != null &&
                    this.ForeignId.Equals(input.ForeignId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DeviceId == input.DeviceId ||
                    (this.DeviceId != null &&
                    this.DeviceId.Equals(input.DeviceId))
                ) && 
                (
                    this.ConfigId == input.ConfigId ||
                    (this.ConfigId != null &&
                    this.ConfigId.Equals(input.ConfigId))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Outline != null)
                    hashCode = hashCode * 59 + this.Outline.GetHashCode();
                if (this.Center != null)
                    hashCode = hashCode * 59 + this.Center.GetHashCode();
                if (this.Radius != null)
                    hashCode = hashCode * 59 + this.Radius.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.WasInside != null)
                    hashCode = hashCode * 59 + this.WasInside.GetHashCode();
                if (this.LastChecked != null)
                    hashCode = hashCode * 59 + this.LastChecked.GetHashCode();
                if (this.Modified != null)
                    hashCode = hashCode * 59 + this.Modified.GetHashCode();
                if (this.Meta != null)
                    hashCode = hashCode * 59 + this.Meta.GetHashCode();
                if (this.ForeignId != null)
                    hashCode = hashCode * 59 + this.ForeignId.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.DeviceId != null)
                    hashCode = hashCode * 59 + this.DeviceId.GetHashCode();
                if (this.ConfigId != null)
                    hashCode = hashCode * 59 + this.ConfigId.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
