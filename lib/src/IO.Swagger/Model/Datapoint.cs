/* 
 * TrackingAPI
 *
 * API for retrieving tracking data and changing settings on LightBug & RemoteThings tracking devices
 *
 * OpenAPI spec version: 1.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Datapoint
    /// </summary>
    [DataContract]
    public partial class Datapoint :  IEquatable<Datapoint>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Datapoint" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Datapoint() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Datapoint" /> class.
        /// </summary>
        /// <param name="Location">Location.</param>
        /// <param name="Timestamp">Timestamp for the datapoint. NB this is not necessarily the same as &#39;created&#39; (required).</param>
        /// <param name="Speed">Ground velocity in kmh, as determined by the GPS.</param>
        /// <param name="Altitude">Altitude in m, as determined by the GPS.</param>
        /// <param name="Course">Course in degrees, as determined by the GPS.</param>
        /// <param name="NumValue">Internal use only.</param>
        /// <param name="StringValue">Internal use only.</param>
        /// <param name="SendReason">Bitfield indicating reason for datapoint transmission and status of the device at the time.   Bit1(1): Wake mode active,    Bit2(2): Sleep mode active,    Bit3(4): Bluetooth disconnected,    Bit4(8): Outside of Safe-zone,    Bit5(16): Motion detected,    Bit6(32): Device started moving,    Bit7(64): Device stopped moving,    Bit8(128): Position is stale: last known location was used   Special case 255/0xFF: device was checking in with server. Ignore all data.</param>
        /// <param name="Sats">Number of visible satellites, as determined by the GPS.</param>
        /// <param name="Hdop">Deprecated.</param>
        /// <param name="Accuracy">Accuracy of the location in meters.</param>
        /// <param name="LocationType">Type of position. Can be &#39;gps&#39;, &#39;wifi&#39;, &#39;gsm&#39; or &#39;invalid&#39; (required) (default to &quot;gps&quot;).</param>
        /// <param name="BatteryVoltage">Battery charge level in volts..</param>
        /// <param name="AverageCharge">Internal Use. 255 indicates plugged in and charging..</param>
        /// <param name="Created">Timestamp for when the datapoint was received and processed by the server (required).</param>
        /// <param name="Address">A reverse geocode result for the point.</param>
        /// <param name="AlertType">Bitfield indicating what alerts where active at transmission time   Bit1(1): Freefall / Drop detected,    Bit2(2): Rotation detected,    Bit3(4): GSM jamming detected,    Bit4(8): Button was pressed,    Bit5(16): Generic Alert .</param>
        /// <param name="Id">Id.</param>
        /// <param name="DeviceId">DeviceId.</param>
        public Datapoint(GeoPoint Location = default(GeoPoint), DateTime? Timestamp = default(DateTime?), decimal? Speed = default(decimal?), decimal? Altitude = default(decimal?), decimal? Course = default(decimal?), string NumValue = default(string), string StringValue = default(string), decimal? SendReason = default(decimal?), decimal? Sats = default(decimal?), decimal? Hdop = default(decimal?), decimal? Accuracy = default(decimal?), string LocationType = "gps", decimal? BatteryVoltage = default(decimal?), decimal? AverageCharge = default(decimal?), DateTime? Created = default(DateTime?), string Address = default(string), decimal? AlertType = default(decimal?), decimal? Id = default(decimal?), decimal? DeviceId = default(decimal?))
        {
            // to ensure "Timestamp" is required (not null)
            if (Timestamp == null)
            {
                throw new InvalidDataException("Timestamp is a required property for Datapoint and cannot be null");
            }
            else
            {
                this.Timestamp = Timestamp;
            }
            // to ensure "LocationType" is required (not null)
            if (LocationType == null)
            {
                throw new InvalidDataException("LocationType is a required property for Datapoint and cannot be null");
            }
            else
            {
                this.LocationType = LocationType;
            }
            // to ensure "Created" is required (not null)
            if (Created == null)
            {
                throw new InvalidDataException("Created is a required property for Datapoint and cannot be null");
            }
            else
            {
                this.Created = Created;
            }
            this.Location = Location;
            this.Speed = Speed;
            this.Altitude = Altitude;
            this.Course = Course;
            this.NumValue = NumValue;
            this.StringValue = StringValue;
            this.SendReason = SendReason;
            this.Sats = Sats;
            this.Hdop = Hdop;
            this.Accuracy = Accuracy;
            this.BatteryVoltage = BatteryVoltage;
            this.AverageCharge = AverageCharge;
            this.Address = Address;
            this.AlertType = AlertType;
            this.Id = Id;
            this.DeviceId = DeviceId;
        }
        
        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public GeoPoint Location { get; set; }

        /// <summary>
        /// Timestamp for the datapoint. NB this is not necessarily the same as &#39;created&#39;
        /// </summary>
        /// <value>Timestamp for the datapoint. NB this is not necessarily the same as &#39;created&#39;</value>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Ground velocity in kmh, as determined by the GPS
        /// </summary>
        /// <value>Ground velocity in kmh, as determined by the GPS</value>
        [DataMember(Name="speed", EmitDefaultValue=false)]
        public decimal? Speed { get; set; }

        /// <summary>
        /// Altitude in m, as determined by the GPS
        /// </summary>
        /// <value>Altitude in m, as determined by the GPS</value>
        [DataMember(Name="altitude", EmitDefaultValue=false)]
        public decimal? Altitude { get; set; }

        /// <summary>
        /// Course in degrees, as determined by the GPS
        /// </summary>
        /// <value>Course in degrees, as determined by the GPS</value>
        [DataMember(Name="course", EmitDefaultValue=false)]
        public decimal? Course { get; set; }

        /// <summary>
        /// Internal use only
        /// </summary>
        /// <value>Internal use only</value>
        [DataMember(Name="num_value", EmitDefaultValue=false)]
        public string NumValue { get; set; }

        /// <summary>
        /// Internal use only
        /// </summary>
        /// <value>Internal use only</value>
        [DataMember(Name="stringValue", EmitDefaultValue=false)]
        public string StringValue { get; set; }

        /// <summary>
        /// Bitfield indicating reason for datapoint transmission and status of the device at the time.   Bit1(1): Wake mode active,    Bit2(2): Sleep mode active,    Bit3(4): Bluetooth disconnected,    Bit4(8): Outside of Safe-zone,    Bit5(16): Motion detected,    Bit6(32): Device started moving,    Bit7(64): Device stopped moving,    Bit8(128): Position is stale: last known location was used   Special case 255/0xFF: device was checking in with server. Ignore all data
        /// </summary>
        /// <value>Bitfield indicating reason for datapoint transmission and status of the device at the time.   Bit1(1): Wake mode active,    Bit2(2): Sleep mode active,    Bit3(4): Bluetooth disconnected,    Bit4(8): Outside of Safe-zone,    Bit5(16): Motion detected,    Bit6(32): Device started moving,    Bit7(64): Device stopped moving,    Bit8(128): Position is stale: last known location was used   Special case 255/0xFF: device was checking in with server. Ignore all data</value>
        [DataMember(Name="sendReason", EmitDefaultValue=false)]
        public decimal? SendReason { get; set; }

        /// <summary>
        /// Number of visible satellites, as determined by the GPS
        /// </summary>
        /// <value>Number of visible satellites, as determined by the GPS</value>
        [DataMember(Name="sats", EmitDefaultValue=false)]
        public decimal? Sats { get; set; }

        /// <summary>
        /// Deprecated
        /// </summary>
        /// <value>Deprecated</value>
        [DataMember(Name="hdop", EmitDefaultValue=false)]
        public decimal? Hdop { get; set; }

        /// <summary>
        /// Accuracy of the location in meters
        /// </summary>
        /// <value>Accuracy of the location in meters</value>
        [DataMember(Name="accuracy", EmitDefaultValue=false)]
        public decimal? Accuracy { get; set; }

        /// <summary>
        /// Type of position. Can be &#39;gps&#39;, &#39;wifi&#39;, &#39;gsm&#39; or &#39;invalid&#39;
        /// </summary>
        /// <value>Type of position. Can be &#39;gps&#39;, &#39;wifi&#39;, &#39;gsm&#39; or &#39;invalid&#39;</value>
        [DataMember(Name="locationType", EmitDefaultValue=false)]
        public string LocationType { get; set; }

        /// <summary>
        /// Battery charge level in volts.
        /// </summary>
        /// <value>Battery charge level in volts.</value>
        [DataMember(Name="batteryVoltage", EmitDefaultValue=false)]
        public decimal? BatteryVoltage { get; set; }

        /// <summary>
        /// Internal Use. 255 indicates plugged in and charging.
        /// </summary>
        /// <value>Internal Use. 255 indicates plugged in and charging.</value>
        [DataMember(Name="averageCharge", EmitDefaultValue=false)]
        public decimal? AverageCharge { get; set; }

        /// <summary>
        /// Timestamp for when the datapoint was received and processed by the server
        /// </summary>
        /// <value>Timestamp for when the datapoint was received and processed by the server</value>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime? Created { get; set; }

        /// <summary>
        /// A reverse geocode result for the point
        /// </summary>
        /// <value>A reverse geocode result for the point</value>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public string Address { get; set; }

        /// <summary>
        /// Bitfield indicating what alerts where active at transmission time   Bit1(1): Freefall / Drop detected,    Bit2(2): Rotation detected,    Bit3(4): GSM jamming detected,    Bit4(8): Button was pressed,    Bit5(16): Generic Alert 
        /// </summary>
        /// <value>Bitfield indicating what alerts where active at transmission time   Bit1(1): Freefall / Drop detected,    Bit2(2): Rotation detected,    Bit3(4): GSM jamming detected,    Bit4(8): Button was pressed,    Bit5(16): Generic Alert </value>
        [DataMember(Name="alertType", EmitDefaultValue=false)]
        public decimal? AlertType { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public decimal? Id { get; set; }

        /// <summary>
        /// Gets or Sets DeviceId
        /// </summary>
        [DataMember(Name="deviceId", EmitDefaultValue=false)]
        public decimal? DeviceId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Datapoint {\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Speed: ").Append(Speed).Append("\n");
            sb.Append("  Altitude: ").Append(Altitude).Append("\n");
            sb.Append("  Course: ").Append(Course).Append("\n");
            sb.Append("  NumValue: ").Append(NumValue).Append("\n");
            sb.Append("  StringValue: ").Append(StringValue).Append("\n");
            sb.Append("  SendReason: ").Append(SendReason).Append("\n");
            sb.Append("  Sats: ").Append(Sats).Append("\n");
            sb.Append("  Hdop: ").Append(Hdop).Append("\n");
            sb.Append("  Accuracy: ").Append(Accuracy).Append("\n");
            sb.Append("  LocationType: ").Append(LocationType).Append("\n");
            sb.Append("  BatteryVoltage: ").Append(BatteryVoltage).Append("\n");
            sb.Append("  AverageCharge: ").Append(AverageCharge).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  AlertType: ").Append(AlertType).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DeviceId: ").Append(DeviceId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Datapoint);
        }

        /// <summary>
        /// Returns true if Datapoint instances are equal
        /// </summary>
        /// <param name="input">Instance of Datapoint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Datapoint input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.Speed == input.Speed ||
                    (this.Speed != null &&
                    this.Speed.Equals(input.Speed))
                ) && 
                (
                    this.Altitude == input.Altitude ||
                    (this.Altitude != null &&
                    this.Altitude.Equals(input.Altitude))
                ) && 
                (
                    this.Course == input.Course ||
                    (this.Course != null &&
                    this.Course.Equals(input.Course))
                ) && 
                (
                    this.NumValue == input.NumValue ||
                    (this.NumValue != null &&
                    this.NumValue.Equals(input.NumValue))
                ) && 
                (
                    this.StringValue == input.StringValue ||
                    (this.StringValue != null &&
                    this.StringValue.Equals(input.StringValue))
                ) && 
                (
                    this.SendReason == input.SendReason ||
                    (this.SendReason != null &&
                    this.SendReason.Equals(input.SendReason))
                ) && 
                (
                    this.Sats == input.Sats ||
                    (this.Sats != null &&
                    this.Sats.Equals(input.Sats))
                ) && 
                (
                    this.Hdop == input.Hdop ||
                    (this.Hdop != null &&
                    this.Hdop.Equals(input.Hdop))
                ) && 
                (
                    this.Accuracy == input.Accuracy ||
                    (this.Accuracy != null &&
                    this.Accuracy.Equals(input.Accuracy))
                ) && 
                (
                    this.LocationType == input.LocationType ||
                    (this.LocationType != null &&
                    this.LocationType.Equals(input.LocationType))
                ) && 
                (
                    this.BatteryVoltage == input.BatteryVoltage ||
                    (this.BatteryVoltage != null &&
                    this.BatteryVoltage.Equals(input.BatteryVoltage))
                ) && 
                (
                    this.AverageCharge == input.AverageCharge ||
                    (this.AverageCharge != null &&
                    this.AverageCharge.Equals(input.AverageCharge))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.AlertType == input.AlertType ||
                    (this.AlertType != null &&
                    this.AlertType.Equals(input.AlertType))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DeviceId == input.DeviceId ||
                    (this.DeviceId != null &&
                    this.DeviceId.Equals(input.DeviceId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.Speed != null)
                    hashCode = hashCode * 59 + this.Speed.GetHashCode();
                if (this.Altitude != null)
                    hashCode = hashCode * 59 + this.Altitude.GetHashCode();
                if (this.Course != null)
                    hashCode = hashCode * 59 + this.Course.GetHashCode();
                if (this.NumValue != null)
                    hashCode = hashCode * 59 + this.NumValue.GetHashCode();
                if (this.StringValue != null)
                    hashCode = hashCode * 59 + this.StringValue.GetHashCode();
                if (this.SendReason != null)
                    hashCode = hashCode * 59 + this.SendReason.GetHashCode();
                if (this.Sats != null)
                    hashCode = hashCode * 59 + this.Sats.GetHashCode();
                if (this.Hdop != null)
                    hashCode = hashCode * 59 + this.Hdop.GetHashCode();
                if (this.Accuracy != null)
                    hashCode = hashCode * 59 + this.Accuracy.GetHashCode();
                if (this.LocationType != null)
                    hashCode = hashCode * 59 + this.LocationType.GetHashCode();
                if (this.BatteryVoltage != null)
                    hashCode = hashCode * 59 + this.BatteryVoltage.GetHashCode();
                if (this.AverageCharge != null)
                    hashCode = hashCode * 59 + this.AverageCharge.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.AlertType != null)
                    hashCode = hashCode * 59 + this.AlertType.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.DeviceId != null)
                    hashCode = hashCode * 59 + this.DeviceId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
