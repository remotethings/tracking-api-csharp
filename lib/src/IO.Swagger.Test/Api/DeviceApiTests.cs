/* 
 * TrackingAPI
 *
 * API for retrieving tracking data and changing settings on LightBug & RemoteThings tracking devices
 *
 * OpenAPI spec version: 1.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing DeviceApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DeviceApiTests
    {
        private DeviceApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DeviceApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DeviceApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DeviceApi
            //Assert.IsInstanceOfType(typeof(DeviceApi), instance, "instance is a DeviceApi");
        }

        
        /// <summary>
        /// Test DeviceFindById
        /// </summary>
        [Test]
        public void DeviceFindByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.DeviceFindById(id, filter);
            //Assert.IsInstanceOf<Device> (response, "response is Device");
        }
        
        /// <summary>
        /// Test DevicePrototypeCreateNotificationTriggers
        /// </summary>
        [Test]
        public void DevicePrototypeCreateNotificationTriggersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? id = null;
            //NotificationTrigger data = null;
            //var response = instance.DevicePrototypeCreateNotificationTriggers(id, data);
            //Assert.IsInstanceOf<NotificationTrigger> (response, "response is NotificationTrigger");
        }
        
        /// <summary>
        /// Test DevicePrototypeDeleteNotificationTriggers
        /// </summary>
        [Test]
        public void DevicePrototypeDeleteNotificationTriggersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? id = null;
            //instance.DevicePrototypeDeleteNotificationTriggers(id);
            
        }
        
        /// <summary>
        /// Test DevicePrototypeDestroyByIdPoints
        /// </summary>
        [Test]
        public void DevicePrototypeDestroyByIdPointsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? fk = null;
            //decimal? id = null;
            //instance.DevicePrototypeDestroyByIdPoints(fk, id);
            
        }
        
        /// <summary>
        /// Test DevicePrototypeFindByIdPoints
        /// </summary>
        [Test]
        public void DevicePrototypeFindByIdPointsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? fk = null;
            //decimal? id = null;
            //var response = instance.DevicePrototypeFindByIdPoints(fk, id);
            //Assert.IsInstanceOf<Datapoint> (response, "response is Datapoint");
        }
        
        /// <summary>
        /// Test DevicePrototypeFindByIdReadings
        /// </summary>
        [Test]
        public void DevicePrototypeFindByIdReadingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? fk = null;
            //decimal? id = null;
            //var response = instance.DevicePrototypeFindByIdReadings(fk, id);
            //Assert.IsInstanceOf<SensorReading> (response, "response is SensorReading");
        }
        
        /// <summary>
        /// Test DevicePrototypeGetConfig
        /// </summary>
        [Test]
        public void DevicePrototypeGetConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? id = null;
            //bool? refresh = null;
            //var response = instance.DevicePrototypeGetConfig(id, refresh);
            //Assert.IsInstanceOf<DeviceConfig> (response, "response is DeviceConfig");
        }
        
        /// <summary>
        /// Test DevicePrototypeGetNotificationTriggers
        /// </summary>
        [Test]
        public void DevicePrototypeGetNotificationTriggersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? id = null;
            //string filter = null;
            //var response = instance.DevicePrototypeGetNotificationTriggers(id, filter);
            //Assert.IsInstanceOf<List<NotificationTrigger>> (response, "response is List<NotificationTrigger>");
        }
        
        /// <summary>
        /// Test DevicePrototypeGetPoints
        /// </summary>
        [Test]
        public void DevicePrototypeGetPointsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? id = null;
            //string filter = null;
            //var response = instance.DevicePrototypeGetPoints(id, filter);
            //Assert.IsInstanceOf<List<Datapoint>> (response, "response is List<Datapoint>");
        }
        
        /// <summary>
        /// Test DevicePrototypeGetReadings
        /// </summary>
        [Test]
        public void DevicePrototypeGetReadingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? id = null;
            //string filter = null;
            //var response = instance.DevicePrototypeGetReadings(id, filter);
            //Assert.IsInstanceOf<List<SensorReading>> (response, "response is List<SensorReading>");
        }
        
        /// <summary>
        /// Test DevicePrototypeGetSafeZone
        /// </summary>
        [Test]
        public void DevicePrototypeGetSafeZoneTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? id = null;
            //var response = instance.DevicePrototypeGetSafeZone(id);
            //Assert.IsInstanceOf<Geofence> (response, "response is Geofence");
        }
        
        /// <summary>
        /// Test DevicePrototypeSetSafeZone
        /// </summary>
        [Test]
        public void DevicePrototypeSetSafeZoneTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<GeoPoint> data = null;
            //decimal? id = null;
            //var response = instance.DevicePrototypeSetSafeZone(data, id);
            //Assert.IsInstanceOf<Geofence> (response, "response is Geofence");
        }
        
        /// <summary>
        /// Test DevicePrototypeSleep
        /// </summary>
        [Test]
        public void DevicePrototypeSleepTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? id = null;
            //decimal? duration = null;
            //var response = instance.DevicePrototypeSleep(id, duration);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test DevicePrototypeUpdateConfig
        /// </summary>
        [Test]
        public void DevicePrototypeUpdateConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? id = null;
            //DeviceConfig data = null;
            //var response = instance.DevicePrototypeUpdateConfig(id, data);
            //Assert.IsInstanceOf<DeviceConfig> (response, "response is DeviceConfig");
        }
        
        /// <summary>
        /// Test DevicePrototypeWakeUp
        /// </summary>
        [Test]
        public void DevicePrototypeWakeUpTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? id = null;
            //decimal? duration = null;
            //var response = instance.DevicePrototypeWakeUp(id, duration);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
    }

}
