/* 
 * TrackingAPI
 *
 * API for retrieving tracking data and changing settings on LightBug & RemoteThings tracking devices
 *
 * OpenAPI spec version: 1.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing DeviceApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DeviceApiTests
    {
        private DeviceApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DeviceApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DeviceApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DeviceApi
            //Assert.IsInstanceOfType(typeof(DeviceApi), instance, "instance is a DeviceApi");
        }

        
        /// <summary>
        /// Test DeviceFindById
        /// </summary>
        [Test]
        public void DeviceFindByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.DeviceFindById(id, filter);
            //Assert.IsInstanceOf<Device> (response, "response is Device");
        }
        
        /// <summary>
        /// Test DevicePrototypeCreateGatewayReadings
        /// </summary>
        [Test]
        public void DevicePrototypeCreateGatewayReadingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? id = null;
            //SensorReading data = null;
            //var response = instance.DevicePrototypeCreateGatewayReadings(id, data);
            //Assert.IsInstanceOf<SensorReading> (response, "response is SensorReading");
        }
        
        /// <summary>
        /// Test DevicePrototypeCreateMessages
        /// </summary>
        [Test]
        public void DevicePrototypeCreateMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? id = null;
            //DeviceMessage data = null;
            //var response = instance.DevicePrototypeCreateMessages(id, data);
            //Assert.IsInstanceOf<DeviceMessage> (response, "response is DeviceMessage");
        }
        
        /// <summary>
        /// Test DevicePrototypeCreateNotificationTriggers
        /// </summary>
        [Test]
        public void DevicePrototypeCreateNotificationTriggersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? id = null;
            //NotificationTrigger data = null;
            //var response = instance.DevicePrototypeCreateNotificationTriggers(id, data);
            //Assert.IsInstanceOf<NotificationTrigger> (response, "response is NotificationTrigger");
        }
        
        /// <summary>
        /// Test DevicePrototypeDeleteGatewayReadings
        /// </summary>
        [Test]
        public void DevicePrototypeDeleteGatewayReadingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? id = null;
            //instance.DevicePrototypeDeleteGatewayReadings(id);
            
        }
        
        /// <summary>
        /// Test DevicePrototypeDeleteMessages
        /// </summary>
        [Test]
        public void DevicePrototypeDeleteMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? id = null;
            //instance.DevicePrototypeDeleteMessages(id);
            
        }
        
        /// <summary>
        /// Test DevicePrototypeDeleteNotificationTriggers
        /// </summary>
        [Test]
        public void DevicePrototypeDeleteNotificationTriggersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? id = null;
            //instance.DevicePrototypeDeleteNotificationTriggers(id);
            
        }
        
        /// <summary>
        /// Test DevicePrototypeDestroyByIdGatewayReadings
        /// </summary>
        [Test]
        public void DevicePrototypeDestroyByIdGatewayReadingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? id = null;
            //decimal? fk = null;
            //instance.DevicePrototypeDestroyByIdGatewayReadings(id, fk);
            
        }
        
        /// <summary>
        /// Test DevicePrototypeDestroyByIdNotificationTriggers
        /// </summary>
        [Test]
        public void DevicePrototypeDestroyByIdNotificationTriggersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? id = null;
            //decimal? fk = null;
            //instance.DevicePrototypeDestroyByIdNotificationTriggers(id, fk);
            
        }
        
        /// <summary>
        /// Test DevicePrototypeDestroyByIdPoints
        /// </summary>
        [Test]
        public void DevicePrototypeDestroyByIdPointsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? id = null;
            //decimal? fk = null;
            //instance.DevicePrototypeDestroyByIdPoints(id, fk);
            
        }
        
        /// <summary>
        /// Test DevicePrototypeDestroyByIdTransients
        /// </summary>
        [Test]
        public void DevicePrototypeDestroyByIdTransientsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? id = null;
            //decimal? fk = null;
            //instance.DevicePrototypeDestroyByIdTransients(id, fk);
            
        }
        
        /// <summary>
        /// Test DevicePrototypeFindByIdGatewayReadings
        /// </summary>
        [Test]
        public void DevicePrototypeFindByIdGatewayReadingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? id = null;
            //decimal? fk = null;
            //var response = instance.DevicePrototypeFindByIdGatewayReadings(id, fk);
            //Assert.IsInstanceOf<SensorReading> (response, "response is SensorReading");
        }
        
        /// <summary>
        /// Test DevicePrototypeFindByIdNotificationTriggers
        /// </summary>
        [Test]
        public void DevicePrototypeFindByIdNotificationTriggersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? id = null;
            //decimal? fk = null;
            //var response = instance.DevicePrototypeFindByIdNotificationTriggers(id, fk);
            //Assert.IsInstanceOf<NotificationTrigger> (response, "response is NotificationTrigger");
        }
        
        /// <summary>
        /// Test DevicePrototypeFindByIdPoints
        /// </summary>
        [Test]
        public void DevicePrototypeFindByIdPointsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? id = null;
            //decimal? fk = null;
            //var response = instance.DevicePrototypeFindByIdPoints(id, fk);
            //Assert.IsInstanceOf<Datapoint> (response, "response is Datapoint");
        }
        
        /// <summary>
        /// Test DevicePrototypeFindByIdReadings
        /// </summary>
        [Test]
        public void DevicePrototypeFindByIdReadingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? id = null;
            //decimal? fk = null;
            //var response = instance.DevicePrototypeFindByIdReadings(id, fk);
            //Assert.IsInstanceOf<SensorReading> (response, "response is SensorReading");
        }
        
        /// <summary>
        /// Test DevicePrototypeFindByIdTransients
        /// </summary>
        [Test]
        public void DevicePrototypeFindByIdTransientsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? id = null;
            //decimal? fk = null;
            //var response = instance.DevicePrototypeFindByIdTransients(id, fk);
            //Assert.IsInstanceOf<DeviceTransient> (response, "response is DeviceTransient");
        }
        
        /// <summary>
        /// Test DevicePrototypeFlightMode
        /// </summary>
        [Test]
        public void DevicePrototypeFlightModeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? id = null;
            //decimal? duration = null;
            //var response = instance.DevicePrototypeFlightMode(id, duration);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test DevicePrototypeGetConfig
        /// </summary>
        [Test]
        public void DevicePrototypeGetConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? id = null;
            //bool? refresh = null;
            //var response = instance.DevicePrototypeGetConfig(id, refresh);
            //Assert.IsInstanceOf<DeviceConfig> (response, "response is DeviceConfig");
        }
        
        /// <summary>
        /// Test DevicePrototypeGetGatewayReadings
        /// </summary>
        [Test]
        public void DevicePrototypeGetGatewayReadingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? id = null;
            //string filter = null;
            //var response = instance.DevicePrototypeGetGatewayReadings(id, filter);
            //Assert.IsInstanceOf<List<SensorReading>> (response, "response is List<SensorReading>");
        }
        
        /// <summary>
        /// Test DevicePrototypeGetMessages
        /// </summary>
        [Test]
        public void DevicePrototypeGetMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? id = null;
            //string filter = null;
            //var response = instance.DevicePrototypeGetMessages(id, filter);
            //Assert.IsInstanceOf<List<DeviceMessage>> (response, "response is List<DeviceMessage>");
        }
        
        /// <summary>
        /// Test DevicePrototypeGetNotificationTriggers
        /// </summary>
        [Test]
        public void DevicePrototypeGetNotificationTriggersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? id = null;
            //string filter = null;
            //var response = instance.DevicePrototypeGetNotificationTriggers(id, filter);
            //Assert.IsInstanceOf<List<NotificationTrigger>> (response, "response is List<NotificationTrigger>");
        }
        
        /// <summary>
        /// Test DevicePrototypeGetPoints
        /// </summary>
        [Test]
        public void DevicePrototypeGetPointsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? id = null;
            //string filter = null;
            //var response = instance.DevicePrototypeGetPoints(id, filter);
            //Assert.IsInstanceOf<List<Datapoint>> (response, "response is List<Datapoint>");
        }
        
        /// <summary>
        /// Test DevicePrototypeGetReadings
        /// </summary>
        [Test]
        public void DevicePrototypeGetReadingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? id = null;
            //string filter = null;
            //var response = instance.DevicePrototypeGetReadings(id, filter);
            //Assert.IsInstanceOf<List<SensorReading>> (response, "response is List<SensorReading>");
        }
        
        /// <summary>
        /// Test DevicePrototypeGetSafeZone
        /// </summary>
        [Test]
        public void DevicePrototypeGetSafeZoneTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? id = null;
            //var response = instance.DevicePrototypeGetSafeZone(id);
            //Assert.IsInstanceOf<Geofence> (response, "response is Geofence");
        }
        
        /// <summary>
        /// Test DevicePrototypeGetTransients
        /// </summary>
        [Test]
        public void DevicePrototypeGetTransientsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? id = null;
            //string filter = null;
            //var response = instance.DevicePrototypeGetTransients(id, filter);
            //Assert.IsInstanceOf<List<DeviceTransient>> (response, "response is List<DeviceTransient>");
        }
        
        /// <summary>
        /// Test DevicePrototypeNearbyDeviceData
        /// </summary>
        [Test]
        public void DevicePrototypeNearbyDeviceDataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? id = null;
            //string nearbyId = null;
            //string dateRange = null;
            //var response = instance.DevicePrototypeNearbyDeviceData(id, nearbyId, dateRange);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test DevicePrototypeNearbyDevices
        /// </summary>
        [Test]
        public void DevicePrototypeNearbyDevicesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? id = null;
            //string dateRange = null;
            //string correlationId = null;
            //var response = instance.DevicePrototypeNearbyDevices(id, dateRange, correlationId);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test DevicePrototypeSetSafeZone
        /// </summary>
        [Test]
        public void DevicePrototypeSetSafeZoneTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? id = null;
            //List<GeoPoint> data = null;
            //var response = instance.DevicePrototypeSetSafeZone(id, data);
            //Assert.IsInstanceOf<Geofence> (response, "response is Geofence");
        }
        
        /// <summary>
        /// Test DevicePrototypeUpdateByIdGatewayReadings
        /// </summary>
        [Test]
        public void DevicePrototypeUpdateByIdGatewayReadingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? id = null;
            //decimal? fk = null;
            //SensorReading data = null;
            //var response = instance.DevicePrototypeUpdateByIdGatewayReadings(id, fk, data);
            //Assert.IsInstanceOf<SensorReading> (response, "response is SensorReading");
        }
        
        /// <summary>
        /// Test DevicePrototypeUpdateByIdNotificationTriggers
        /// </summary>
        [Test]
        public void DevicePrototypeUpdateByIdNotificationTriggersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? id = null;
            //decimal? fk = null;
            //NotificationTrigger data = null;
            //var response = instance.DevicePrototypeUpdateByIdNotificationTriggers(id, fk, data);
            //Assert.IsInstanceOf<NotificationTrigger> (response, "response is NotificationTrigger");
        }
        
        /// <summary>
        /// Test DevicePrototypeUpdateByIdTransients
        /// </summary>
        [Test]
        public void DevicePrototypeUpdateByIdTransientsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? id = null;
            //decimal? fk = null;
            //DeviceTransient data = null;
            //var response = instance.DevicePrototypeUpdateByIdTransients(id, fk, data);
            //Assert.IsInstanceOf<DeviceTransient> (response, "response is DeviceTransient");
        }
        
        /// <summary>
        /// Test DevicePrototypeUpdateConfig
        /// </summary>
        [Test]
        public void DevicePrototypeUpdateConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? id = null;
            //DeviceConfig data = null;
            //var response = instance.DevicePrototypeUpdateConfig(id, data);
            //Assert.IsInstanceOf<DeviceConfig> (response, "response is DeviceConfig");
        }
        
    }

}
