/* 
 * TrackingAPI
 *
 * API for retrieving tracking data and changing settings on LightBug & RemoteThings tracking devices
 *
 * OpenAPI spec version: 1.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing UserApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class UserApiTests
    {
        private UserApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new UserApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of UserApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' UserApi
            //Assert.IsInstanceOfType(typeof(UserApi), instance, "instance is a UserApi");
        }

        
        /// <summary>
        /// Test UserLogin
        /// </summary>
        [Test]
        public void UserLoginTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Credentials credentials = null;
            //string include = null;
            //var response = instance.UserLogin(credentials, include);
            //Assert.IsInstanceOf<AccessToken> (response, "response is AccessToken");
        }
        
        /// <summary>
        /// Test UserPrototypeCreateGeofences
        /// </summary>
        [Test]
        public void UserPrototypeCreateGeofencesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Geofence data = null;
            //var response = instance.UserPrototypeCreateGeofences(id, data);
            //Assert.IsInstanceOf<Geofence> (response, "response is Geofence");
        }
        
        /// <summary>
        /// Test UserPrototypeDeleteGeofences
        /// </summary>
        [Test]
        public void UserPrototypeDeleteGeofencesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.UserPrototypeDeleteGeofences(id);
            
        }
        
        /// <summary>
        /// Test UserPrototypeDestroyByIdGeofences
        /// </summary>
        [Test]
        public void UserPrototypeDestroyByIdGeofencesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? fk = null;
            //string id = null;
            //instance.UserPrototypeDestroyByIdGeofences(fk, id);
            
        }
        
        /// <summary>
        /// Test UserPrototypeFindByIdGeofences
        /// </summary>
        [Test]
        public void UserPrototypeFindByIdGeofencesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? fk = null;
            //string id = null;
            //var response = instance.UserPrototypeFindByIdGeofences(fk, id);
            //Assert.IsInstanceOf<Geofence> (response, "response is Geofence");
        }
        
        /// <summary>
        /// Test UserPrototypeGetDevices
        /// </summary>
        [Test]
        public void UserPrototypeGetDevicesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.UserPrototypeGetDevices(id, filter);
            //Assert.IsInstanceOf<List<Device>> (response, "response is List<Device>");
        }
        
        /// <summary>
        /// Test UserPrototypeGetGeofences
        /// </summary>
        [Test]
        public void UserPrototypeGetGeofencesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.UserPrototypeGetGeofences(id, filter);
            //Assert.IsInstanceOf<List<Geofence>> (response, "response is List<Geofence>");
        }
        
        /// <summary>
        /// Test UserPrototypeUpdateByIdGeofences
        /// </summary>
        [Test]
        public void UserPrototypeUpdateByIdGeofencesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? fk = null;
            //string id = null;
            //Geofence data = null;
            //var response = instance.UserPrototypeUpdateByIdGeofences(fk, id, data);
            //Assert.IsInstanceOf<Geofence> (response, "response is Geofence");
        }
        
    }

}
